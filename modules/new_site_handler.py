#!/usr/bin/env python3
"""
new_site_handler.py ‚Äî –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º —Å–∞–π—Ç–æ–º –æ—Ç—á–µ—Ç–æ–≤.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤.
"""

import time
import logging
from datetime import datetime, timedelta
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import TimeoutException, NoSuchElementException


class NewSiteReportHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ —Å –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞."""

    def __init__(self, driver, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

        Args:
            driver: WebDriver —ç–∫–∑–µ–º–ø–ª—è—Ä
            logger: –õ–æ–≥–≥–µ—Ä (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π)
        """
        self.driver = driver
        self.logger = logger or logging.getLogger(__name__)

        # ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        self.ELEMENT_IDS = {
            'period_dropdown': 'ReportViewerControl_ctl04_ctl03_ddValue',
            'start_date_field': 'ReportViewerControl_ctl04_ctl05_txtValue',
            'end_date_field': 'ReportViewerControl_ctl04_ctl07_txtValue',
            'reason_dropdown': 'ReportViewerControl_ctl04_ctl09_ddValue',  # –ü–æ–ª–µ –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –æ–±—Ä–∞—â–µ–Ω–∏—è
            'submit_button': 'ReportViewerControl_ctl04_ctl00',
            'excel_link': "//a[contains(text(), 'Excel') and contains(@class, 'ActiveLink')]"
        }

        # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞
        self.PERIOD_VALUES = {
            '–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π': '900',
            '–¥–µ–Ω—å': '1',
            '–Ω–µ–¥–µ–ª—è': '7',
            '–º–µ—Å—è—Ü': '30',
            '7_–¥–Ω–µ–π': '107',
            '—Å–µ–≥–æ–¥–Ω—è': '500'
        }

        # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –æ–±—Ä–∞—â–µ–Ω–∏—è
        self.REASON_VALUES = {
            '–Ω–∏–∑–∫–∞—è_—Å–∫–æ—Ä–æ—Å—Ç—å_3g_4g': '–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ 3G/4G',
            '–Ω–∏–∑–∫–∞—è_—Å–∫–æ—Ä–æ—Å—Ç—å': '–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ 3G/4G',
            '3g_4g': '–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ 3G/4G',
            'default': '–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ 3G/4G'
        }

    def fill_report_parameters(self, start_date, end_date, period='–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π', reason='–Ω–∏–∑–∫–∞—è_—Å–∫–æ—Ä–æ—Å—Ç—å_3g_4g'):
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞.

        Args:
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–∞
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            period: –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π')
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–Ω–∏–∑–∫–∞—è_—Å–∫–æ—Ä–æ—Å—Ç—å_3g_4g')

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—á–µ—Ç–∞...")

            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞"
            if not self._set_report_period(period):
                return False

            # –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª–µ–π –¥–∞—Ç
            time.sleep(2)

            # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"
            if not self._set_start_date(start_date):
                return False

            # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"
            if not self._set_end_date(end_date):
                return False

            # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"
            if not self._set_reason(reason):
                return False

            self.logger.info("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return False

    def _set_report_period(self, period):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞."""
        try:
            period_value = self.PERIOD_VALUES.get(period.lower())
            if not period_value:
                self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {period}")
                return False

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID
            try:
                period_dropdown = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, self.ELEMENT_IDS['period_dropdown']))
                )
            except TimeoutException:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                self.logger.info("üîç –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É...")
                period_dropdown = self._find_element_by_multiple_criteria('period', 'select')

                if not period_dropdown:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ '–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞'")
                    return False

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            if not self._wait_for_element_ready(period_dropdown):
                self.logger.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç '–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞' –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é")
                return False

            period_select = Select(period_dropdown)
            period_select.select_by_value(period_value)

            self.logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {period}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def _set_start_date(self, start_date):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞."""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID
            try:
                start_date_field = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, self.ELEMENT_IDS['start_date_field']))
                )
            except TimeoutException:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                self.logger.info("üîç –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É...")
                start_date_field = self._find_element_by_multiple_criteria('start_date', 'input')

                if not start_date_field:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'")
                    return False

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            if not self._wait_for_element_ready(start_date_field):
                self.logger.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞' –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é")
                return False

            start_date_field.clear()
            start_date_field.send_keys(start_date.strftime("%d.%m.%Y"))

            self.logger.info(f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {start_date.strftime('%d.%m.%Y')}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞: {e}")
            return False

    def _set_end_date(self, end_date):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID
            try:
                end_date_field = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, self.ELEMENT_IDS['end_date_field']))
                )
            except TimeoutException:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                self.logger.info("üîç –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É...")
                end_date_field = self._find_element_by_multiple_criteria('end_date', 'input')

                if not end_date_field:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è'")
                    return False

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            if not self._wait_for_element_ready(end_date_field):
                self.logger.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è' –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é")
                return False

            end_date_field.clear()
            end_date_field.send_keys(end_date.strftime("%d.%m.%Y"))

            self.logger.info(f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {end_date.strftime('%d.%m.%Y')}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: {e}")
            return False

    def _set_reason(self, reason):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è."""
        try:
            reason_value = self.REASON_VALUES.get(reason.lower(), self.REASON_VALUES['default'])

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID
            try:
                reason_dropdown = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, self.ELEMENT_IDS['reason_dropdown']))
                )
            except TimeoutException:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                self.logger.info("üîç –ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É...")
                reason_dropdown = self._find_element_by_multiple_criteria('reason', 'select')

                if not reason_dropdown:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ '–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è'")
                    return False

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            if not self._wait_for_element_ready(reason_dropdown):
                self.logger.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç '–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è' –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é")
                return False

            reason_select = Select(reason_dropdown)

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–ø—Ü–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É
            try:
                reason_select.select_by_visible_text(reason_value)
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                options = reason_select.options
                for option in options:
                    if "–Ω–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å" in option.text.lower() or "3g" in option.text.lower() or "4g" in option.text.lower():
                        reason_select.select_by_visible_text(option.text)
                        self.logger.info(f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {option.text}")
                        return True

                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –æ–ø—Ü–∏—é
                reason_select.select_by_index(0)
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –æ–ø—Ü–∏—è: {reason_select.first_selected_option.text}")

            self.logger.info(f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {reason_value}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            return False

    def _find_element_by_text(self, text, tag_name=None):
        """
        –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É.

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            tag_name: –¢–∏–ø —Ç–µ–≥–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)

        Returns:
            WebElement: –ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ None
        """
        try:
            if tag_name:
                xpath = f"//{tag_name}[contains(text(), '{text}') or contains(@placeholder, '{text}') or contains(@title, '{text}')]"
            else:
                xpath = f"//*[contains(text(), '{text}') or contains(@placeholder, '{text}') or contains(@title, '{text}')]"

            elements = self.driver.find_elements(By.XPATH, xpath)

            if elements:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                return elements[0]

            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
            return None

    def _find_element_by_multiple_criteria(self, field_name, field_type="input"):
        """
        –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.

        Args:
            field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            field_type: –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ (input, select, button)

        Returns:
            WebElement: –ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ None
        """
        try:
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
            field_variants = {
                'period': ['–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞', '–ü–µ—Ä–∏–æ–¥', '–¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞', 'Period'],
                'start_date': ['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', '–ù–∞—á–∞–ª–æ', '–°', 'Start Date', 'From'],
                'end_date': ['–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', '–û–∫–æ–Ω—á–∞–Ω–∏–µ', '–ü–æ', 'End Date', 'To'],
                'reason': ['–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è', '–ü—Ä–∏—á–∏–Ω–∞', '–û–±—Ä–∞—â–µ–Ω–∏–µ', 'Reason', 'Issue Type']
            }

            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—è
            variants = field_variants.get(field_name, [field_name])

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
            for variant in variants:
                element = self._find_element_by_text(variant, field_type)
                if element:
                    self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ '{field_name}' –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É '{variant}'")
                    return element

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
            if field_type == "input":
                # –ò—â–µ–º –ø–æ name –∞—Ç—Ä–∏–±—É—Ç—É
                elements = self.driver.find_elements(By.XPATH, f"//input[contains(@name, '{field_name}') or contains(@id, '{field_name}')]")
                if elements:
                    self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ '{field_name}' –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º")
                    return elements[0]

            elif field_type == "select":
                # –ò—â–µ–º –ø–æ name –∞—Ç—Ä–∏–±—É—Ç—É
                elements = self.driver.find_elements(By.XPATH, f"//select[contains(@name, '{field_name}') or contains(@id, '{field_name}')]")
                if elements:
                    self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ '{field_name}' –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º")
                    return elements[0]

            self.logger.warning(f"‚ö†Ô∏è –ü–æ–ª–µ '{field_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é")
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ '{field_name}' –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {e}")
            return None

    def _wait_for_element_ready(self, element, timeout=5):
        """
        –ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é.

        Args:
            element: WebElement –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            bool: True –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≥–æ—Ç–æ–≤, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            start_time = time.time()
            while time.time() - start_time < timeout:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º –∏ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
                    if element.is_displayed() and element.is_enabled():
                        return True
                    time.sleep(0.5)
                except:
                    time.sleep(0.5)

            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            return False

    def submit_report_request(self, wait_time=10):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞.

        Args:
            wait_time: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            self.logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ ID
            try:
                submit_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, self.ELEMENT_IDS['submit_button']))
                )
            except TimeoutException:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                self.logger.info("üîç –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É...")

                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ç–µ–∫—Å—Ç–∞
                button_texts = ['–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞', '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä', 'Submit', 'Generate']
                submit_button = None

                for text in button_texts:
                    submit_button = self._find_element_by_text(text, "input")
                    if not submit_button:
                        submit_button = self._find_element_by_text(text, "button")
                    if submit_button:
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É: {text}")
                        break

                if not submit_button:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
                    return False

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏
            if not self._wait_for_element_ready(submit_button):
                self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é")
                return False

            submit_button.click()

            self.logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞
            self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ ({wait_time} —Å–µ–∫)...")
            time.sleep(wait_time)

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False

    def export_to_excel(self):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ Excel.

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel...")

            # –ò—â–µ–º Excel –∫–Ω–æ–ø–∫—É
            excel_link = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, self.ELEMENT_IDS['excel_link']))
            )

            self.logger.info("‚úÖ Excel –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞")

            # –ö–ª–∏–∫–∞–µ–º –ø–æ Excel
            excel_link.click()
            self.logger.info("‚úÖ –ö–ª–∏–∫ –ø–æ Excel –≤—ã–ø–æ–ª–Ω–µ–Ω")

            # –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(3)

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            return False

    def wait_for_download(self, download_dir, timeout=60):
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.

        Args:
            download_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            str: –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ {download_dir}...")

            start_time = time.time()
            while time.time() - start_time < timeout:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                import os
                files = [f for f in os.listdir(download_dir)
                        if f.endswith('.xlsx') or f.endswith('.xls')]

                if files:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    files.sort(key=lambda x: os.path.getmtime(
                        os.path.join(download_dir, x)), reverse=True)
                    latest_file = files[0]
                    file_path = os.path.join(download_dir, latest_file)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
                    try:
                        with open(file_path, 'rb') as f:
                            pass
                        self.logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {latest_file}")
                        return file_path
                    except PermissionError:
                        # –§–∞–π–ª –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                        pass

                time.sleep(2)

            self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    def process_report(self, start_date, end_date, download_dir, period='–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π', reason='–Ω–∏–∑–∫–∞—è_—Å–∫–æ—Ä–æ—Å—Ç—å_3g_4g'):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞.

        Args:
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–∞
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            download_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            period: –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è

        Returns:
            str: –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—á–µ—Ç–∞ —Å –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞")

            # 1. –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
            if not self.fill_report_parameters(start_date, end_date, period, reason):
                return None

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            if not self.submit_report_request():
                return None

            # 3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
            if not self.export_to_excel():
                return None

            # 4. –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            downloaded_file = self.wait_for_download(download_dir)
            if not downloaded_file:
                return None

            self.logger.info(f"üéâ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {downloaded_file}")
            return downloaded_file

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
            return None
