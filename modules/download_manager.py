"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–æ–≤.
"""

import time
from datetime import datetime
from pathlib import Path
from typing import List
from loguru import logger
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

from .selenium_helpers import (
    find_parameter_input,
    wait_download,
    apply_cdp_download_settings,
    prepare_download_js,
    REPORT_URL,
    switch_to_report_frame,
)
from .date_time_utils import format_time_intervals, get_time_format_variations
from .regions import setup_regions


def setup_date_range(driver, start_dt: datetime, end_dt: datetime):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–µ –æ—Ç—á–µ—Ç–∞.

    Args:
        driver: WebDriver instance
        start_dt: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        end_dt: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    """
    date_fmt = "%d.%m.%Y"

    # –î–∞—Ç–∞ –æ—Ç (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—É–∑—ã)
    logger.info(f"üìÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ—Ç: {start_dt.strftime(date_fmt)}")
    date_from = find_parameter_input(driver, "–î–∞—Ç–∞ –æ—Ç")
    time.sleep(1)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 2 –¥–æ 1
    date_from.click()
    time.sleep(1)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 2 –¥–æ 1
    date_from.send_keys(Keys.CONTROL, "a")
    time.sleep(0.5)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 2 –¥–æ 0.5
    date_from.send_keys(start_dt.strftime(date_fmt))
    time.sleep(1)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 2 –¥–æ 1
    date_from.send_keys(Keys.TAB)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É
    time.sleep(2)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 3 –¥–æ 2 –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

    # –î–∞—Ç–∞ –¥–æ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—É–∑—ã)
    logger.info(f"üìÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –¥–æ: {end_dt.strftime(date_fmt)}")
    date_to = find_parameter_input(driver, "–î–∞—Ç–∞ –¥–æ")
    time.sleep(1)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 2 –¥–æ 1
    date_to.click()
    time.sleep(1)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 2 –¥–æ 1
    date_to.send_keys(Keys.CONTROL, "a")  # –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ
    time.sleep(0.5)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 2 –¥–æ 0.5
    date_to.send_keys(end_dt.strftime(date_fmt))
    time.sleep(1)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 2 –¥–æ 1
    date_to.send_keys(Keys.TAB)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É
    time.sleep(2)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 3 –¥–æ 2 –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    logger.info(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_dt.strftime(date_fmt)} - {end_dt.strftime(date_fmt)}")


def setup_time_intervals(driver, start_dt: datetime, end_dt: datetime):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ —Ñ–æ—Ä–º–µ –æ—Ç—á–µ—Ç–∞.

    Args:
        driver: WebDriver instance
        start_dt: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        end_dt: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        start_time_str, end_time_str = format_time_intervals(start_dt, end_dt)

        logger.info(f"‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: {start_time_str} - {end_time_str}")

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç
        interval_from_element = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((
                By.XPATH,
                "//td[contains(normalize-space(.),'–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç')]/following-sibling::td//select"
            ))
        )

        interval_from_select = Select(interval_from_element)

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (—É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –¥–ª—è Windows)
        time_formats_to_try = get_time_format_variations(start_time_str)

        selected = False
        for time_format in time_formats_to_try:
            try:
                interval_from_select.select_by_visible_text(time_format)
                selected = True
                break
            except:
                continue

        if not selected:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è {start_time_str}, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")
            try:
                interval_from_select.select_by_index(0)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –û–¢: {e}")

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ
        interval_to_element = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((
                By.XPATH,
                "//td[contains(normalize-space(.),'–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ')]/following-sibling::td//select"
            ))
        )

        interval_to_select = Select(interval_to_element)

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (—É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –¥–ª—è Windows)
        time_formats_to_try_end = get_time_format_variations(end_time_str)

        selected_end = False
        for time_format in time_formats_to_try_end:
            try:
                interval_to_select.select_by_visible_text(time_format)
                selected_end = True
                break
            except:
                continue

        if not selected_end:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è {end_time_str}, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
                interval_to_select.select_by_index(len(interval_to_select.options) - 1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –î–û: {e}")

        time.sleep(1)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        try:
            current_from = interval_from_select.first_selected_option.text.strip()
            current_to = interval_to_select.first_selected_option.text.strip()
            logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {current_from} - {current_to}")
        except:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è")

    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        logger.error("‚ùå –û–°–¢–ê–ù–û–í–ö–ê: –ë–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        raise


def trigger_excel_download(driver) -> float:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞.

    Args:
        driver: WebDriver instance

    Returns:
        float: Timestamp –Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    ts = time.time()
    logger.info("üîÑ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á–µ—Ç–∞...")

    # –£–ë–ï–ñ–î–ê–ï–ú–°–Ø —á—Ç–æ –∫–ª–∏–∫–∞–µ–º –∏–º–µ–Ω–Ω–æ –ø–æ EXCEL –∫–Ω–æ–ø–∫–µ, –∞ –Ω–µ PDF!
    try:
        excel_button = driver.find_element(By.ID, "buttonShowExcel")
        button_text = excel_button.get_attribute("value") or excel_button.text or "N/A"
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Excel: ID=buttonShowExcel, —Ç–µ–∫—Å—Ç='{button_text}'")

        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ JavaScript
        prepare_download_js(driver)

        # –§–ò–ù–ê–õ–¨–ù–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CDP –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        apply_cdp_download_settings(driver)

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Excel
        excel_button.click()
        logger.info("‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Excel –≤—ã–ø–æ–ª–Ω–µ–Ω")

        return ts

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/–∫–ª–∏–∫–µ –∫–Ω–æ–ø–∫–∏ Excel: {e}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            all_buttons = driver.find_elements(By.TAG_NAME, "input")
            button_info = []
            for btn in all_buttons:
                btn_id = btn.get_attribute("id") or "N/A"
                btn_value = btn.get_attribute("value") or "N/A"
                btn_type = btn.get_attribute("type") or "N/A"
                button_info.append(f"ID={btn_id}, value={btn_value}, type={btn_type}")
            logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {button_info}")
        except:
            pass
        raise


def download_report(
    driver: webdriver.Chrome,
    region_ids: List[str],
    start_dt: datetime,
    end_dt: datetime,
) -> Path:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É, –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã, —Å–∫–∞—á–∏–≤–∞–µ—Ç –æ—Ç—á—ë—Ç.

    Args:
        driver: WebDriver instance
        region_ids: –°–ø–∏—Å–æ–∫ ID —Ä–µ–≥–∏–æ–Ω–æ–≤
        start_dt: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        end_dt: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è

    Returns:
        Path: –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–∞: {REPORT_URL}")
    driver.get(REPORT_URL)

    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º CDP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç—á–µ—Ç–∞
    apply_cdp_download_settings(driver)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    logger.info("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–∞...")
    switch_to_report_frame(driver, timeout=30)

    time.sleep(0.5)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 1 –¥–æ 0.5

    # --- 1) –¥–∞—Ç—ã / –≤—Ä–µ–º—è -------------------------------------------------------
    setup_date_range(driver, start_dt, end_dt)

    # --- 2) –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —á–∞—Å–æ–≤ -------------------------------------------------
    setup_time_intervals(driver, start_dt, end_dt)

    # --- 3) –†–∞–±–æ—á–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (—Ä–µ–≥–∏–æ–Ω—ã) -------------------------------------------------
    logger.info("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –Ω–∞–≥—Ä—É–∑–∫—É...")
    if not setup_regions(driver, region_ids):
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã")

    logger.info("‚úÖ –†–∞–±–æ—á–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    time.sleep(0.5)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 1 –¥–æ 0.5

    # --- 4) Excel --------------------------------------------------------------
    logger.info("üìä –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
    ts = trigger_excel_download(driver)

    # –ü—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫)
    logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    return wait_download(ts, driver=driver, timeout=60)  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç