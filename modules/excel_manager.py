"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏ - —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö.
"""

import pandas as pd
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime, date
from loguru import logger
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows


def get_date_from_first_row(df: pd.DataFrame) -> date:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–æ–Ω–∫–µ "–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏".

    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        date: –î–∞—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    if "–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏" not in df.columns:
        logger.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ '–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        raise ValueError("–ö–æ–ª–æ–Ω–∫–∞ '–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã")

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é –¥–∞—Ç—É
    first_date = None
    for idx, row in df.iterrows():
        date_value = row['–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏']
        if pd.notna(date_value) and str(date_value).strip() != '':
            try:
                if isinstance(date_value, str):
                    first_date = datetime.strptime(date_value, "%d.%m.%Y").date()
                elif isinstance(date_value, datetime):
                    first_date = date_value.date()
                else:
                    first_date = pd.to_datetime(date_value).date()
                break
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_value}' –≤ —Å—Ç—Ä–æ–∫–µ {idx}: {e}")
                continue

    if first_date is None:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ '–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏'")
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")

    logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–∞—Ç–∞: {first_date.strftime('%d.%m.%Y')}")
    return first_date


def filter_problems_by_date(df: pd.DataFrame, target_date: date) -> pd.DataFrame:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –ø–æ –¥–∞—Ç–µ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏".

    Args:
        df: DataFrame —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    """
    logger.info(f"üîç –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –¥–∞—Ç—ã {target_date.strftime('%d.%m.%Y')}")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º target_date –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    target_date_str = target_date.strftime('%d.%m.%Y')

    # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–∞—Ç
    logger.info(f"üîç –ò—â–µ–º –¥–∞—Ç—É: '{target_date_str}'")
    logger.info(f"üîç –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–µ '–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏':")
    for idx, date_val in df['–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏'].head(5).items():
        logger.info(f"   –°—Ç—Ä–æ–∫–∞ {idx}: '{date_val}' (—Ç–∏–ø: {type(date_val)})")

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    def normalize_date(date_val):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—É –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É DD.MM.YYYY"""
        if pd.isna(date_val):
            return None

        try:
            if isinstance(date_val, str):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                return datetime.strptime(date_val, "%d.%m.%Y").strftime("%d.%m.%Y")
            elif isinstance(date_val, datetime):
                # –ï—Å–ª–∏ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
                return date_val.strftime("%d.%m.%Y")
            elif isinstance(date_val, date):
                # –ï—Å–ª–∏ —ç—Ç–æ date –æ–±—ä–µ–∫—Ç
                return date_val.strftime("%d.%m.%Y")
            else:
                # –ü—Ä–æ–±—É–µ–º pandas to_datetime
                parsed_date = pd.to_datetime(date_val)
                return parsed_date.strftime("%d.%m.%Y")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É '{date_val}': {e}")
            return str(date_val)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã –≤ DataFrame
    normalized_dates = df['–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏'].apply(normalize_date)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    date_filter = normalized_dates == target_date_str

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    filtered_df = df[date_filter].copy()
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –ø—Ä–æ–±–ª–µ–º –¥–ª—è –¥–∞—Ç—ã {target_date.strftime('%d.%m.%Y')}")

    if len(filtered_df) == 0:
        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –¥–∞—Ç—ã {target_date.strftime('%d.%m.%Y')}")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
        logger.info(f"üîç –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ:")
        unique_dates = df['–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏'].dropna().unique()
        for date_val in unique_dates[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            logger.info(f"   '{date_val}' (—Ç–∏–ø: {type(date_val)})")
    else:
        logger.info(f"‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for idx, row in filtered_df.iterrows():
            date_str = row['–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏'] if pd.notna(row['–î–∞—Ç–∞–ë–µ–∑–í—Ä–µ–º–µ–Ω–∏']) else 'N/A'
            logger.info(f"   üìã {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']} - {row['–†–µ–≥–∏–æ–Ω']} (–¥–∞—Ç–∞: {date_str})")

    return filtered_df


def calculate_time_window_for_date(row: pd.Series, target_date: date) -> tuple[datetime, datetime]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–±–ª–µ–º—ã.

    Args:
        row: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º—ã
        target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞

    Returns:
        tuple[datetime, datetime]: (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    """
    target_datetime_start = datetime.combine(target_date, datetime.min.time())  # 00:00:00
    target_datetime_end = datetime.combine(target_date, datetime.max.time())    # 23:59:59

    problem_start = row['–°—Ç–∞—Ä—Ç']
    problem_end = row['–û–∫–æ–Ω—á–∞–Ω–∏–µ']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    if problem_start.date() == target_date:
        # –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É - –±–µ—Ä–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è
        window_start = problem_start
    else:
        # –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —Ä–∞–Ω—å—à–µ - –±–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ –¥–Ω—è
        window_start = target_datetime_start

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    if pd.isna(problem_end):
        # –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ - –±–µ—Ä–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è
        window_end = target_datetime_end
    elif problem_end.date() == target_date:
        # –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É - –±–µ—Ä–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
        window_end = problem_end
    else:
        # –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∂–µ - –±–µ—Ä–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è
        window_end = target_datetime_end

    logger.info(f"üïí –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']} –Ω–∞ {target_date.strftime('%d.%m.%Y')}:")
    logger.info(f"   üìç –ù–∞—á–∞–ª–æ: {window_start.strftime('%d.%m.%Y %H:%M')}")
    logger.info(f"   üìç –û–∫–æ–Ω—á–∞–Ω–∏–µ: {window_end.strftime('%d.%m.%Y %H:%M')}")

    return window_start, window_end


def save_results_to_excel(
    results: List[Dict[str, Any]],
    original_file_path: Path,
    target_date: date
) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç Excel —Ñ–∞–π–ª–∞.
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö + –∫–æ–ª–æ–Ω–∫–∞ "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ".

    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        original_file_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É Excel —Ñ–∞–π–ª—É
        target_date: –î–∞—Ç–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç: {original_file_path}")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        workbook = load_workbook(original_file_path)

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sheet_name = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_{target_date.strftime('%d_%m_%Y')}"
        if sheet_name in workbook.sheetnames:
            result_sheet = workbook[sheet_name]
        else:
            result_sheet = workbook.create_sheet(sheet_name)
            logger.info(f"üìã –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç: {sheet_name}")

        # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–æ–≤—ã–π, –∫–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ "–û—Ç—á–µ—Ç"
        if result_sheet.max_row == 1 and result_sheet.max_column == 1:
            # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ª–∏—Å—Ç–∞ "–û—Ç—á–µ—Ç"
            report_sheet = workbook["–û—Ç—á–µ—Ç"]
            for col in range(1, report_sheet.max_column + 1):
                cell_value = report_sheet.cell(row=1, column=col).value
                result_sheet.cell(row=1, column=col, value=cell_value)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∏ "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" –∏ "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ"
            lost_col = None
            excess_col = None

            for col in range(1, result_sheet.max_column + 1):
                header = result_sheet.cell(row=1, column=col).value
                if header:
                    header_str = str(header).strip()
                    if "–ø–æ—Ç–µ—Ä—è–Ω–Ω" in header_str.lower():
                        lost_col = col
                    elif "–ø—Ä–µ–≤—ã—à–µ–Ω" in header_str.lower():
                        excess_col = col

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if lost_col is None:
                lost_col = result_sheet.max_column + 1
                result_sheet.cell(row=1, column=lost_col, value="–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ")
                logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ' –≤ –ø–æ–∑–∏—Ü–∏—é {lost_col}")
            else:
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ '–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ' –≤ –ø–æ–∑–∏—Ü–∏–∏ {lost_col}")

            if excess_col is None:
                excess_col = result_sheet.max_column + 1
                result_sheet.cell(row=1, column=excess_col, value="–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ")
                logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ' –≤ –ø–æ–∑–∏—Ü–∏—é {excess_col}")
            else:
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ' –≤ –ø–æ–∑–∏—Ü–∏–∏ {excess_col}")

            logger.info(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –º–∞—Å—Å–æ–≤–æ–π
        mass_number_col = None
        for col in range(1, result_sheet.max_column + 1):
            header = result_sheet.cell(row=1, column=col).value
            if header and "–Ω–æ–º–µ—Ä" in str(header).lower() and "–º–∞—Å—Å–æ–≤–æ–π" in str(header).lower():
                mass_number_col = col
                break

        if mass_number_col is None:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –º–∞—Å—Å–æ–≤–æ–π")
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dict = {}
        for result in results:
            mass_number = result["–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π"]
            lost_calls = result["LostCalls"]
            excess_traffic = result.get("ExcessTraffic", 0.0)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É excess_traffic
            results_dict[mass_number] = {"lost": lost_calls, "excess": excess_traffic}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for mass_number, data in results_dict.items():
            lost_calls = data["lost"]
            excess_traffic = data["excess"]

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –º–∞—Å—Å–æ–≤–æ–π
            target_row = None
            for row in range(2, result_sheet.max_row + 1):
                cell_value = result_sheet.cell(row=row, column=mass_number_col).value
                if str(cell_value) == str(mass_number):
                    target_row = row
                    break

            if target_row is None:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                target_row = result_sheet.max_row + 1
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ {target_row} –¥–ª—è {mass_number}")

            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ "–û—Ç—á–µ—Ç"
            report_sheet = workbook["–û—Ç—á–µ—Ç"]
            report_row = None
            for row in range(2, report_sheet.max_row + 1):
                cell_value = report_sheet.cell(row=row, column=mass_number_col).value
                if str(cell_value) == str(mass_number):
                    report_row = row
                    break

            if report_row:
                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                for col in range(1, report_sheet.max_column + 1):
                    cell_value = report_sheet.cell(row=report_row, column=col).value
                    result_sheet.cell(row=target_row, column=col, value=cell_value)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if lost_col is not None:
                result_sheet.cell(row=target_row, column=lost_col, value=lost_calls)
            if excess_col is not None:
                result_sheet.cell(row=target_row, column=excess_col, value=excess_traffic)

            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {mass_number} ‚Üí lost={lost_calls}, excess={excess_traffic}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        workbook.save(original_file_path)
        logger.info(f"üíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–∏—Å—Ç '{sheet_name}'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


def check_notes_column(
    workbook,
    report_sheet,
    target_row: int
) -> tuple:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–º–µ—Ç–∫–∏" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    Args:
        workbook: –†–∞–±–æ—á–∞—è –∫–Ω–∏–≥–∞ Excel
        report_sheet: –õ–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        target_row: –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        tuple: (should_skip, notes_value, reason) - –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—Ç—Ä–æ–∫—É
    """
    try:
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É "–ó–∞–º–µ—Ç–∫–∏"
        notes_col = None
        for col in range(1, report_sheet.max_column + 1):
            header = report_sheet.cell(row=1, column=col).value
            if header and "–∑–∞–º–µ—Ç–∫" in str(header).lower():
                notes_col = col
                break

        if notes_col is None:
            logger.warning("‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '–ó–∞–º–µ—Ç–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏")
            return False, None, "notes_column_not_found"

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–ó–∞–º–µ—Ç–∫–∏"
        notes_value = report_sheet.cell(row=target_row, column=notes_col).value

        if notes_value is None:
            logger.info(f"üìù –°—Ç—Ä–æ–∫–∞ {target_row}: –∫–æ–ª–æ–Ω–∫–∞ '–ó–∞–º–µ—Ç–∫–∏' –ø—É—Å—Ç–∞—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
            return False, notes_value, "notes_empty"

        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        try:
            notes_numeric = float(str(notes_value).strip())
            if notes_numeric < 50:
                logger.info(f"üìù –°—Ç—Ä–æ–∫–∞ {target_row}: –∑–∞–º–µ—Ç–∫–∞ = {notes_value} < 50 - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
                return True, notes_value, "notes_less_50"
            else:
                logger.info(f"üìù –°—Ç—Ä–æ–∫–∞ {target_row}: –∑–∞–º–µ—Ç–∫–∞ = {notes_value} >= 50 - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
                return False, notes_value, "notes_ok"
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞
            logger.info(f"üìù –°—Ç—Ä–æ–∫–∞ {target_row}: –∑–∞–º–µ—Ç–∫–∞ = '{notes_value}' (—Ç–µ–∫—Å—Ç) - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
            return False, notes_value, "notes_text"

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–∫–∏ '–ó–∞–º–µ—Ç–∫–∏': {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
        return False, None, "error_checking_notes"


def save_excel_batch(
    workbook,
    report_sheet,
    original_file_path: Path,
    batch_size: int = 10
) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Excel —Ñ–∞–π–ª –ø–∞–∫–µ—Ç–Ω–æ.

    Args:
        workbook: –†–∞–±–æ—á–∞—è –∫–Ω–∏–≥–∞ Excel
        report_sheet: –õ–∏—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        original_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        batch_size: –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        workbook.save(original_file_path)
        logger.info(f"üíæ –ü–∞–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {original_file_path.name}")
        return True
    except PermissionError as pe:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –î–û–°–¢–£–ü–ê: –§–∞–π–ª {original_file_path} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        logger.error(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error(f"   - –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ Excel")
        logger.error(f"   - –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        logger.error(f"   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        raise pe
    except Exception as save_e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {save_e}")
        raise save_e


def save_single_result_to_original_file(
    mass_number: str,
    lost_calls: int,
    excess_traffic: float,
    original_file_path: Path,
    row_index: int,
    workbook=None,
    report_sheet=None,
    save_counter=0
) -> tuple:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π Excel —Ñ–∞–π–ª.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" –∏ "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ" –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.

    Args:
        mass_number: –ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        lost_calls: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        excess_traffic: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ")
        original_file_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É Excel —Ñ–∞–π–ª—É
        row_index: –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
        workbook: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è —Ä–∞–±–æ—á–∞—è –∫–Ω–∏–≥–∞ (–¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        report_sheet: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –ª–∏—Å—Ç (–¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        save_counter: –°—á–µ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    Returns:
        tuple: (workbook, report_sheet, save_counter, skip_reason) –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {mass_number}: lost={lost_calls}, excess={excess_traffic}")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if workbook is None:
            workbook = load_workbook(original_file_path)
            report_sheet = workbook["–û—Ç—á–µ—Ç"]
        elif report_sheet is None:
            report_sheet = workbook["–û—Ç—á–µ—Ç"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∏ "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" –∏ "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ"
        lost_col = None
        excess_col = None

        for col in range(1, report_sheet.max_column + 1):
            header = report_sheet.cell(row=1, column=col).value
            if header:
                header_str = str(header).strip()
                if "–ø–æ—Ç–µ—Ä—è–Ω–Ω" in header_str.lower():
                    lost_col = col
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ '–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ' –≤ –ø–æ–∑–∏—Ü–∏–∏ {col}")
                elif "–ø—Ä–µ–≤—ã—à–µ–Ω" in header_str.lower():
                    excess_col = col
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ' –≤ –ø–æ–∑–∏—Ü–∏–∏ {col}")

        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if lost_col is None:
            lost_col = report_sheet.max_column + 1
            report_sheet.cell(row=1, column=lost_col, value="–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ")
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ' –≤ –ø–æ–∑–∏—Ü–∏—é {lost_col}")

        if excess_col is None:
            excess_col = report_sheet.max_column + 1
            report_sheet.cell(row=1, column=excess_col, value="–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ")
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ' –≤ –ø–æ–∑–∏—Ü–∏—é {excess_col}")

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –º–∞—Å—Å–æ–≤–æ–π
        mass_number_col = None
        for col in range(1, report_sheet.max_column + 1):
            header = report_sheet.cell(row=1, column=col).value
            if header and "–Ω–æ–º–µ—Ä" in str(header).lower() and "–º–∞—Å—Å–æ–≤–æ–π" in str(header).lower():
                mass_number_col = col
                break

        if mass_number_col is None:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –º–∞—Å—Å–æ–≤–æ–π")
            return workbook, report_sheet, save_counter, "no_mass_number_col"

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –º–∞—Å—Å–æ–≤–æ–π
        target_row = None
        for row in range(2, report_sheet.max_row + 1):
            cell_value = report_sheet.cell(row=row, column=mass_number_col).value
            if str(cell_value) == str(mass_number):
                target_row = row
                break

        if target_row is None:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –º–∞—Å—Å–æ–≤–æ–π {mass_number}")
            return workbook, report_sheet, save_counter, "row_not_found"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" –∏ "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ"
        existing_lost = report_sheet.cell(row=target_row, column=lost_col).value
        existing_excess = report_sheet.cell(row=target_row, column=excess_col).value

        if existing_lost is not None and existing_excess is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ –∏ –Ω–µ —Ä–∞–≤–Ω—ã 0 (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π)
            if str(existing_lost).strip() != "" and str(existing_excess).strip() != "":
                logger.info(f"‚è≠Ô∏è –°—Ç—Ä–æ–∫–∞ {mass_number} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (lost={existing_lost}, excess={existing_excess}) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return workbook, report_sheet, save_counter, "already_processed"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        report_sheet.cell(row=target_row, column=lost_col, value=lost_calls)
        report_sheet.cell(row=target_row, column=excess_col, value=excess_traffic)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π
        save_counter += 1

        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Å—Ç—Ä–æ–∫—É {target_row}: {mass_number} ‚Üí lost={lost_calls} (–∫–æ–ª–æ–Ω–∫–∞ {lost_col}), excess={excess_traffic} (–∫–æ–ª–æ–Ω–∫–∞ {excess_col})")

        return workbook, report_sheet, save_counter, "success"

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {mass_number}: {e}")
        raise