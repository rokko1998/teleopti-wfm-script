"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.
"""

import os
import time
from pathlib import Path
from loguru import logger


def cleanup_downloaded_files(download_dir: Path = None) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫.

    Args:
        download_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–ø–∫–∞ downloads –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    """
    if download_dir is None:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É downloads –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_root = Path(__file__).resolve().parent.parent
        download_dir = project_root / "downloads"

    if not download_dir.exists():
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {download_dir}")
        return

    logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫: {download_dir}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        all_files = list(download_dir.glob("*"))

        if not all_files:
            logger.info("‚úÖ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ —É–∂–µ –ø—É—Å—Ç–∞")
            return

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
        file_types = {}
        total_size = 0

        for file_path in all_files:
            if file_path.is_file():
                file_type = file_path.suffix.lower() or "–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"
                file_size = file_path.stat().st_size

                if file_type not in file_types:
                    file_types[file_type] = {"count": 0, "size": 0}

                file_types[file_type]["count"] += 1
                file_types[file_type]["size"] += file_size
                total_size += file_size

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for file_type, stats in file_types.items():
            size_mb = stats["size"] / (1024 * 1024)
            logger.info(f"   {file_type}: {stats['count']} —Ñ–∞–π–ª–æ–≤ ({size_mb:.2f} MB)")

        total_mb = total_size / (1024 * 1024)
        logger.info(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_mb:.2f} MB")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        deleted_count = 0
        failed_count = 0

        for file_path in all_files:
            try:
                if file_path.is_file():
                    file_path.unlink()  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    deleted_count += 1
                    logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path.name}")
                elif file_path.is_dir():
                    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                    import shutil
                    shutil.rmtree(file_path)
                    deleted_count += 1
                    logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {file_path.name}")
            except Exception as e:
                failed_count += 1
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path.name}: {e}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if failed_count == 0:
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫")
        else:
            logger.warning(f"‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: —É–¥–∞–ª–µ–Ω–æ {deleted_count}, –Ω–µ —É–¥–∞–ª–µ–Ω–æ {failed_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–∞
        remaining_files = list(download_dir.glob("*"))
        if remaining_files:
            logger.warning(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ñ–∞–π–ª—ã: {[f.name for f in remaining_files]}")
        else:
            logger.info("‚úÖ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π traceback:")


def cleanup_old_files(download_dir: Path = None, max_age_hours: int = 24) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞).

    Args:
        download_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫
        max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å–∞—Ö
    """
    if download_dir is None:
        project_root = Path(__file__).resolve().parent.parent
        download_dir = project_root / "downloads"

    if not download_dir.exists():
        return

    current_time = time.time()
    max_age_seconds = max_age_hours * 3600

    logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Å—Ç–∞—Ä—à–µ {max_age_hours} —á–∞—Å–æ–≤) –≤ –ø–∞–ø–∫–µ: {download_dir}")

    old_files = []
    for file_path in download_dir.glob("*"):
        if file_path.is_file():
            file_age = current_time - file_path.stat().st_mtime
            if file_age > max_age_seconds:
                old_files.append(file_path)

    if not old_files:
        logger.info("‚úÖ –°—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(old_files)} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    deleted_count = 0
    for file_path in old_files:
        try:
            file_path.unlink()
            deleted_count += 1
            logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path.name}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª {file_path.name}: {e}")

    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")
