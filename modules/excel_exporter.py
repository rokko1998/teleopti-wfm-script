"""
–ú–æ–¥—É–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel
"""

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import JavascriptException, WebDriverException
from loguru import logger
import time
import os


class ExcelExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel"""

    def __init__(self, driver, logger):
        self.driver = driver
        self.logger = logger

        # –û—Ç–∫–ª—é—á–∞–µ–º Google –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
        self._disable_google_logs()

    def wait_for_report_ready(self, timeout=120):
        """–î–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º"""
        try:
            self.logger.info("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞...")

            # –°–Ω–∞—á–∞–ª–∞ –∂–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.logger.info("‚è≥ –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            try:
                WebDriverWait(self.driver, 30).until(
                    lambda driver: driver.execute_script("return document.readyState") == "complete"
                )
                self.logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except:
                self.logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ timeout
            check_interval = 5
            max_checks = timeout // check_interval

            for check_num in range(max_checks):
                self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {check_num + 1}/{max_checks} - –∏—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞...")

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
                export_button = self.find_export_button_by_text()
                if export_button:
                    self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É")
                    self.logger.info("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                    return True

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É, –ø—Ä–æ–±—É–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                export_selectors = [
                    "a[onclick*='exportReport']",
                    "a[onclick*='EXCELOPENXML']",
                    "a[class*='ActiveLink']",
                    "div[id*='Export'] a",
                    "div[class*='ToolbarExport'] a"
                ]

                for selector in export_selectors:
                    try:
                        export_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if export_button.is_enabled():  # –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É is_displayed()
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                            self.logger.info("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                            return True
                    except:
                        continue

                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                if check_num < max_checks - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    self.logger.info(f"‚è≥ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º {check_interval} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(check_interval)

            self.logger.error(f"‚ùå –û—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def find_save_button(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            save_selectors = [
                "a[title*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "a[title*='Save']",
                "button[title*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "button[title*='Save']",
                "input[value*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "input[value*='Save']",
                "[class*='save']",
                "[id*='save']"
            ]

            for selector in save_selectors:
                try:
                    save_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if save_button.is_displayed() and save_button.is_enabled():
                        self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                        return save_button
                except:
                    continue

            self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

    def click_save_button(self):
        """–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            save_button = self.find_save_button()
            if not save_button:
                return False

            self.logger.info("üíæ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
            save_button.click()

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
            time.sleep(2)

            self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def select_excel_format(self):
        """–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é"""
        try:
            self.logger.info("üìä –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç Excel...")

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Excel –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
            excel_selectors = [
                "a[href*='Excel']",
                "a[title*='Excel']",
                "a[title*='excel']",
                "a[title*='–≠–∫—Å–µ–ª—å']",
                "a[title*='—ç–∫—Å–µ–ª—å']"
            ]

            for selector in excel_selectors:
                try:
                    excel_link = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if excel_link.is_displayed():
                        self.logger.info("‚úÖ –°—Å—ã–ª–∫–∞ Excel –Ω–∞–π–¥–µ–Ω–∞")
                        excel_link.click()
                        self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç Excel –≤—ã–±—Ä–∞–Ω")
                        return True
                except:
                    continue

            # –ü–æ–∏—Å–∫ –ø–æ XPath (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
            try:
                excel_link = self.driver.find_element(By.XPATH, "//a[contains(text(), 'Excel') or contains(text(), 'excel') or contains(text(), '–≠–∫—Å–µ–ª—å') or contains(text(), '—ç–∫—Å–µ–ª—å')]")
                if excel_link.is_displayed():
                    self.logger.info("‚úÖ –°—Å—ã–ª–∫–∞ Excel –Ω–∞–π–¥–µ–Ω–∞ –ø–æ XPath")
                    excel_link.click()
                    self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç Excel –≤—ã–±—Ä–∞–Ω")
                    return True
            except:
                pass

            # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é href
            try:
                excel_link = self.driver.find_element(By.XPATH, "//a[contains(@href, 'Excel') or contains(@href, 'excel')]")
                if excel_link.is_displayed():
                    self.logger.info("‚úÖ –°—Å—ã–ª–∫–∞ Excel –Ω–∞–π–¥–µ–Ω–∞ –ø–æ href")
                    excel_link.click()
                    self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç Excel –≤—ã–±—Ä–∞–Ω")
                    return True
            except:
                pass

            self.logger.error("‚ùå –°—Å—ã–ª–∫–∞ Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é")
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ Excel: {e}")
            return False

    def export_to_excel(self, wait_time=120):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            self.logger.info("üì§ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel...")

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
            if not self.wait_for_report_ready(timeout=wait_time):
                return False

                                    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            iframe_found = self.check_and_switch_iframe()
            
            # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞...")
            export_elements = self.find_export_elements_via_js()
            
            # 3. –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Ç–µ—Å—Ç–µ)
            self.logger.info("üöÄ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ JavaScript...")
            if self.click_excel_export_via_js():
                self.logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ JavaScript")
                return True
            
            # 4. –ï—Å–ª–∏ JavaScript –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ iframe –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ iframe
            if iframe_found:
                self.logger.info("üîÑ Iframe –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ Excel –∫–Ω–æ–ø–∫–∏ –≤ iframe...")
                # –û—Å—Ç–∞–µ–º—Å—è –≤ iframe –¥–ª—è –ø–æ–∏—Å–∫–∞
            else:
                self.logger.info("üîÑ Iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
                self.driver.switch_to.default_content()

            # 3. –ï—Å–ª–∏ JavaScript –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            self.logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ Selenium...")

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            export_button = self.find_export_button_by_text()
            if not export_button:
                self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
                return False

            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.logger.info("üíæ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Selenium...")
            try:
                export_button.click()
            except Exception as click_error:
                self.logger.warning(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {click_error}")
                # –ü—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                try:
                    self.driver.execute_script("arguments[0].click();", export_button)
                    self.logger.info("‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ JavaScript")
                except Exception as js_click_error:
                    self.logger.error(f"‚ùå JavaScript –∫–ª–∏–∫ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {js_click_error}")
                    return False

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            time.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel –∏–∑ –º–µ–Ω—é
            if not self.select_excel_format():
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel –∏–∑ –º–µ–Ω—é, –≤–æ–∑–º–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

            self.logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            return False

    def find_excel_export_via_js(self):
        """–ù–∞–π—Ç–∏ Excel –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ JavaScript (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π)"""
        try:
            self.logger.info("üîç –ò—â–µ–º Excel –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ JavaScript...")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –≤ –∫–∞–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
            context_info = self.driver.execute_script("""
                return {
                    url: window.location.href,
                    title: document.title,
                    readyState: document.readyState,
                    iframeCount: document.querySelectorAll('iframe').length,
                    activeElement: document.activeElement ? document.activeElement.tagName : 'none'
                };
            """)

            self.logger.info(f"üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
            self.logger.info(f"   ‚Ä¢ URL: {context_info.get('url', '–ù–µ—Ç')}")
            self.logger.info(f"   ‚Ä¢ Title: {context_info.get('title', '–ù–µ—Ç')}")
            self.logger.info(f"   ‚Ä¢ Ready State: {context_info.get('readyState', '–ù–µ—Ç')}")
            self.logger.info(f"   ‚Ä¢ Iframe count: {context_info.get('iframeCount', 0)}")

            # –£–ª—É—á—à–µ–Ω–Ω—ã–π JavaScript –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ Excel –∫–Ω–æ–ø–∫–∏
            js_code = """
            console.log('=== –î–ï–¢–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö EXCEL –ö–ù–û–ü–ö–ò ===');

            const results = {
                found: false,
                method: 'none',
                details: {},
                allLinks: [],
                exportElements: []
            };

            // 1. –ü–æ–∏—Å–∫ –ø–æ ActiveLink –∫–ª–∞—Å—Å—É
            console.log('1. –ü–æ–∏—Å–∫ –ø–æ ActiveLink...');
            const activeLinks = document.querySelectorAll('a.ActiveLink');
            console.log('–ù–∞–π–¥–µ–Ω–æ ActiveLink —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', activeLinks.length);

            for (let i = 0; i < activeLinks.length; i++) {
                const link = activeLinks[i];
                const text = link.textContent.trim();
                console.log(`ActiveLink ${i+1}: "${text}"`);

                if (text.includes('Excel') || text.includes('excel')) {
                    console.log('‚úÖ Excel –Ω–∞–π–¥–µ–Ω –≤ ActiveLink!');
                    results.found = true;
                    results.method = 'ActiveLink';
                    results.details = {
                        element: link,
                        text: text,
                        className: link.className,
                        onclick: link.onclick ? link.onclick.toString() : null,
                        isVisible: link.offsetParent !== null &&
                                  link.style.display !== 'none' &&
                                  link.style.visibility !== 'hidden'
                    };
                    break;
                }
            }

            // 2. –ü–æ–∏—Å–∫ –ø–æ exportReport —Ñ—É–Ω–∫—Ü–∏—è–º
            if (!results.found) {
                console.log('2. –ü–æ–∏—Å–∫ –ø–æ exportReport...');
                const allElements = document.querySelectorAll('*');
                console.log('–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allElements.length);

                const exportElements = Array.from(allElements).filter(el => {
                    const onclick = el.onclick ? el.onclick.toString() : '';
                    return onclick.includes('exportReport');
                });

                console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Å exportReport:', exportElements.length);
                results.exportElements = exportElements.map((el, i) => ({
                    index: i + 1,
                    tag: el.tagName,
                    text: el.textContent.trim(),
                    onclick: el.onclick.toString(),
                    className: el.className
                }));

                const excelElement = exportElements.find(el => {
                    const text = el.textContent.toLowerCase();
                    return text.includes('excel') || text.includes('—ç–∫—Å–ø–æ—Ä—Ç');
                });

                if (excelElement) {
                    console.log('‚úÖ Excel –Ω–∞–π–¥–µ–Ω –ø–æ exportReport!');
                    results.found = true;
                    results.method = 'exportReport';
                    results.details = {
                        element: excelElement,
                        text: excelElement.textContent.trim(),
                        className: excelElement.className,
                        onclick: excelElement.onclick.toString(),
                        isVisible: excelElement.offsetParent !== null
                    };
                }
            }

            // 3. –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ –≤—Å–µ—Ö —Å—Å—ã–ª–∫–∞—Ö
            if (!results.found) {
                console.log('3. –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ –≤—Å–µ—Ö —Å—Å—ã–ª–∫–∞—Ö...');
                const allLinks = document.querySelectorAll('a');
                console.log('–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allLinks.length);

                results.allLinks = Array.from(allLinks).map((link, i) => ({
                    index: i + 1,
                    text: link.textContent.trim(),
                    className: link.className,
                    onclick: link.onclick ? link.onclick.toString() : null
                }));

                const excelLink = Array.from(allLinks).find(link => {
                    const text = link.textContent.toLowerCase();
                    return text.includes('excel') || text.includes('—ç–∫—Å–ø–æ—Ä—Ç');
                });

                if (excelLink) {
                    console.log('‚úÖ Excel –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É!');
                    results.found = true;
                    results.method = 'text_search';
                    results.details = {
                        element: excelLink,
                        text: excelLink.textContent.trim(),
                        className: excelLink.className,
                        onclick: excelLink.onclick ? excelLink.onclick.toString() : null,
                        isVisible: excelLink.offsetParent !== null
                    };
                }
            }

            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', results);
            return results;
            """

            # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript
            result = self.driver.execute_script(js_code)

            if result and result.get('found'):
                method = result.get('method', 'unknown')
                details = result.get('details', {})

                self.logger.info(f"‚úÖ Excel –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ JS (–º–µ—Ç–æ–¥: {method}): {details.get('text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                self.logger.info(f"üìä –í–∏–¥–∏–º–æ—Å—Ç—å: {details.get('isVisible', False)}")
                self.logger.info(f"üìã OnClick: {details.get('onclick', '–ù–µ—Ç')[:100] if details.get('onclick') else '–ù–µ—Ç'}...")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º WebElement
                return details.get('element')
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                self.logger.warning("‚ö†Ô∏è Excel –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript")

                if result:
                    export_elements = result.get('exportElements', [])
                    all_links = result.get('allLinks', [])

                    if export_elements:
                        self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(export_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å exportReport:")
                        for elem in export_elements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            self.logger.info(f"   ‚Ä¢ {elem['tag']}: '{elem['text'][:50]}...'")

                    if all_links:
                        excel_links = [link for link in all_links if 'excel' in link['text'].lower()]
                        if excel_links:
                            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(excel_links)} —Å—Å—ã–ª–æ–∫ —Å 'Excel' –≤ —Ç–µ–∫—Å—Ç–µ:")
                            for link in excel_links[:3]:
                                self.logger.info(f"   ‚Ä¢ '{link['text']}' (–∫–ª–∞—Å—Å: {link['className']})")

                return None

        except JavascriptException as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript: {e}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ JavaScript: {e}")
            return None

    def check_and_switch_iframe(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å iframe –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")

            # –ò—â–µ–º –≤—Å–µ iframe
            iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
            self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(iframes)} iframe —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

            if not iframes:
                self.logger.info("‚úÖ Iframe –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Å—Ç–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π iframe –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
            for i, iframe in enumerate(iframes):
                try:
                    self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe {i+1}...")

                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ iframe
                    self.driver.switch_to.frame(iframe)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ iframe
                    iframe_info = self.driver.execute_script("""
                        return {
                            title: document.title,
                            url: window.location.href,
                            hasExportElements: document.querySelectorAll('a[onclick*="exportReport"]').length > 0,
                            hasActiveLinks: document.querySelectorAll('a.ActiveLink').length > 0,
                            hasExcelText: document.querySelector('a:contains("Excel")') !== null
                        };
                    """)

                    self.logger.info(f"   ‚Ä¢ Title: {iframe_info.get('title', '–ù–µ—Ç')}")
                    self.logger.info(f"   ‚Ä¢ Has exportReport: {iframe_info.get('hasExportElements', False)}")
                    self.logger.info(f"   ‚Ä¢ Has ActiveLink: {iframe_info.get('hasActiveLinks', False)}")

                    # –ï—Å–ª–∏ –≤ —ç—Ç–æ–º iframe –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞, –æ—Å—Ç–∞–µ–º—Å—è –∑–¥–µ—Å—å
                    if (iframe_info.get('hasExportElements') or
                        iframe_info.get('hasActiveLinks') or
                        iframe_info.get('hasExcelText')):
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π iframe {i+1}, –æ—Å—Ç–∞–µ–º—Å—è –∑–¥–µ—Å—å")
                        return True

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    self.driver.switch_to.default_content()

                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ iframe {i+1}: {e}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    try:
                        self.driver.switch_to.default_content()
                    except:
                        pass

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π iframe, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.driver.switch_to.default_content()
            self.logger.info("‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–π iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ iframe: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            try:
                self.driver.switch_to.default_content()
            except:
                pass
            return False

    def _disable_google_logs(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å Google –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ (—É—Å–∏–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
            os.environ['WDM_LOG_LEVEL'] = '0'
            os.environ['WDM_PRINT_FIRST_LINE'] = 'False'
            os.environ['GOOGLE_API_LOG_LEVEL'] = '0'
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è console.log –æ—Ç Google
            js_code = """
            // –û—Ç–∫–ª—é—á–∞–µ–º Google –ª–æ–≥–∏ (—É—Å–∏–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            if (typeof console !== 'undefined') {
                const originalLog = console.log;
                const originalWarn = console.warn;
                const originalError = console.error;
                
                const googlePatterns = [
                    'google_apis', 'voice_transcription', 'AiaRequest', 
                    'Registration response error', 'WARNING: All log messages',
                    'absl::InitializeLog', 'DevTools listening', 'ws://127.0.0.1',
                    'chrome_', 'gcm', 'engine', 'registration_request'
                ];
                
                function shouldBlockMessage(message) {
                    return googlePatterns.some(pattern => 
                        message.toLowerCase().includes(pattern.toLowerCase())
                    );
                }
                
                console.log = function(...args) {
                    const message = args.join(' ');
                    if (!shouldBlockMessage(message)) {
                        originalLog.apply(console, args);
                    }
                };
                
                console.warn = function(...args) {
                    const message = args.join(' ');
                    if (!shouldBlockMessage(message)) {
                        originalWarn.apply(console, args);
                    }
                };
                
                console.error = function(...args) {
                    const message = args.join(' ');
                    if (!shouldBlockMessage(message)) {
                        originalError.apply(console, args);
                    }
                };
            }
            
            // –û—Ç–∫–ª—é—á–∞–µ–º DevTools –ª–æ–≥–∏
            if (typeof window !== 'undefined') {
                window.addEventListener('error', function(e) {
                    if (e.message && shouldBlockMessage(e.message)) {
                        e.preventDefault();
                        return false;
                    }
                });
            }
            """
            self.driver.execute_script(js_code)
            self.logger.info("üîá Google –ª–æ–≥–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (—É—Å–∏–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å Google –ª–æ–≥–∏: {e}")

    def find_export_elements_via_js(self):
        """–ù–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å exportReport —á–µ—Ä–µ–∑ JavaScript"""
        try:
            self.logger.info("üîç –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å exportReport...")

            js_code = """
            const exportElements = Array.from(document.querySelectorAll('*')).filter(el => {
                const onclick = el.onclick ? el.onclick.toString() : '';
                return onclick.includes('exportReport');
            });

            return exportElements.map((el, i) => ({
                index: i + 1,
                tag: el.tagName,
                text: el.textContent.trim(),
                onclick: el.onclick ? el.onclick.toString() : null,
                className: el.className,
                id: el.id
            }));
            """

            elements = self.driver.execute_script(js_code)

            if elements:
                self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å exportReport:")
                for element in elements:
                    self.logger.info(f"  ‚Ä¢ {element['index']}: {element['tag']} - '{element['text'][:50]}{'...' if len(element['text']) > 50 else ''}'")

            return elements

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ JavaScript: {e}")
            return []

    def click_excel_export_via_js(self):
        """–ù–∞–∂–∞—Ç—å –Ω–∞ Excel —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ JavaScript"""
        try:
            self.logger.info("üñ±Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∂–∞—Ç—å Excel —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ JavaScript...")

            js_code = """
            // 1. –ù–∞—Ö–æ–¥–∏–º Excel –∫–Ω–æ–ø–∫—É
            const excelLink = document.querySelector('a.ActiveLink[text="Excel"]') ||
                              Array.from(document.querySelectorAll('a.ActiveLink')).find(el => el.textContent.includes('Excel'));

            if (excelLink) {
                try {
                    excelLink.click();
                    return { success: true, method: 'ActiveLink', text: excelLink.textContent };
                } catch (e) {
                    return { success: false, error: e.message, method: 'ActiveLink' };
                }
            }

            // 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–∏—Å–∫ –ø–æ exportReport
            const exportElements = Array.from(document.querySelectorAll('*')).filter(el => {
                const onclick = el.onclick ? el.onclick.toString() : '';
                return onclick.includes('exportReport') && onclick.includes('EXCELOPENXML');
            });

            if (exportElements.length > 0) {
                const excelElement = exportElements.find(el =>
                    el.textContent.includes('Excel') || el.textContent.includes('excel')
                );

                if (excelElement) {
                    try {
                        excelElement.click();
                        return { success: true, method: 'exportReport', text: excelElement.textContent };
                    } catch (e) {
                        return { success: false, error: e.message, method: 'exportReport' };
                    }
                }
            }

            // 3. –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ exportReport, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ ReportViewerControl
            try {
                if (typeof $find !== 'undefined') {
                    const control = $find('ReportViewerControl');
                    if (control && control.exportReport) {
                        control.exportReport('EXCELOPENXML');
                        return { success: true, method: 'direct_call' };
                    }
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã
            }

            return { success: false, error: 'Excel –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
            """

            result = self.driver.execute_script(js_code)

            if result and result.get('success'):
                method = result.get('method', 'unknown')
                text = result.get('text', '')
                self.logger.info(f"‚úÖ Excel —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ {method}: '{text}'")
                return True
            else:
                error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Excel —ç–∫—Å–ø–æ—Ä—Ç: {error}")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ —á–µ—Ä–µ–∑ JavaScript: {e}")
            return False

    def find_export_button_by_text(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JavaScript (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            js_element = self.find_excel_export_via_js()
            if js_element:
                return js_element

            # –ï—Å–ª–∏ JavaScript –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            self.logger.info("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫...")

            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_links = self.driver.find_elements(By.TAG_NAME, "a")

            for link in all_links:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                    link_text = link.text.strip().lower()
                    link_title = link.get_attribute('title') or ''
                    link_alt = link.get_attribute('alt') or ''
                    link_onclick = link.get_attribute('onclick') or ''

                    # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if any(keyword in link_text for keyword in ['excel', '—ç–∫—Å–ø–æ—Ä—Ç', 'export']):
                        # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É is_displayed() - —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç, –Ω–æ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
                        if link.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: '{link_text}'")
                            return link

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º onclick –Ω–∞ –Ω–∞–ª–∏—á–∏–µ exportReport
                    if 'exportReport' in link_onclick and 'EXCELOPENXML' in link_onclick:
                        if link.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ onclick: '{link_onclick[:100]}...'")
                            return link

                except:
                    continue

            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
            return None

    def run_excel_export_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel (–∫–∞–∫ –≤–∞—à JavaScript —Ç–µ—Å—Ç)"""
        try:
            self.logger.info("=== üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EXCEL –≠–ö–°–ü–û–†–¢–ê ===")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ç –∂–µ JavaScript –∫–æ–¥, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º —Ç–µ—Å—Ç–µ
            js_test_code = """
            console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EXCEL –≠–ö–°–ü–û–†–¢–ê ===');

            // 1. –ù–∞—Ö–æ–¥–∏–º Excel –∫–Ω–æ–ø–∫—É
            const excelLink = document.querySelector('a.ActiveLink[text="Excel"]') ||
                              Array.from(document.querySelectorAll('a.ActiveLink')).find(el => el.textContent.includes('Excel'));

            const result = {
                excelLinkFound: !!excelLink,
                excelLinkInfo: null,
                parentDropdown: null,
                isVisible: false,
                clickResult: null,
                exportElements: []
            };

            if (excelLink) {
                result.excelLinkInfo = {
                    text: excelLink.textContent,
                    className: excelLink.className,
                    onclick: excelLink.onclick ? excelLink.onclick.toString() : null,
                    style: excelLink.style.cssText
                };

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π dropdown
                result.parentDropdown = excelLink.closest('[class*="Menu"], [class*="dropdown"], [class*="MenuBar"]');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                result.isVisible = excelLink.offsetParent !== null &&
                                 excelLink.style.display !== 'none' &&
                                 excelLink.style.visibility !== 'hidden';
            }

            // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å exportReport
            const exportElements = Array.from(document.querySelectorAll('*')).filter(el => {
                const onclick = el.onclick ? el.onclick.toString() : '';
                return onclick.includes('exportReport');
            });

            result.exportElements = exportElements.map((el, i) => ({
                index: i + 1,
                tag: el.tagName,
                text: el.textContent.trim(),
                onclick: el.onclick.toString()
            }));

            return result;
            """

            test_result = self.driver.execute_script(js_test_code)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            if test_result:
                self.logger.info(f"üìä Excel —Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {test_result.get('excelLinkFound', False)}")

                if test_result.get('excelLinkInfo'):
                    info = test_result['excelLinkInfo']
                    self.logger.info(f"üìã Excel —Å—Å—ã–ª–∫–∞:")
                    self.logger.info(f"   ‚Ä¢ –¢–µ–∫—Å—Ç: {info.get('text', '–ù–µ—Ç')}")
                    self.logger.info(f"   ‚Ä¢ –ö–ª–∞—Å—Å: {info.get('className', '–ù–µ—Ç')}")
                    self.logger.info(f"   ‚Ä¢ OnClick: {info.get('onclick', '–ù–µ—Ç')[:100] if info.get('onclick') else '–ù–µ—Ç'}...")

                self.logger.info(f"üëÅÔ∏è Excel –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞: {test_result.get('isVisible', False)}")

                export_elements = test_result.get('exportElements', [])
                self.logger.info(f"üìã –≠–ª–µ–º–µ–Ω—Ç—ã —Å exportReport: {len(export_elements)}")

                for element in export_elements[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    text_preview = element['text'][:50] + '...' if len(element['text']) > 50 else element['text']
                    self.logger.info(f"   ‚Ä¢ {element['index']}: {element['tag']} - '{text_preview}'")

                if len(export_elements) > 5:
                    self.logger.info(f"   ... –∏ –µ—â–µ {len(export_elements) - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

            return test_result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
            return None
