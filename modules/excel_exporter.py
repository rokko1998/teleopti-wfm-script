"""
–ú–æ–¥—É–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel
"""

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import logging
import time


class ExcelExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel"""

    def __init__(self, driver, logger):
        self.driver = driver
        self.logger = logger

    def wait_for_report_ready(self, timeout=120):
        """–î–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º"""
        try:
            self.logger.info("[excel_exporter] ‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ timeout
            check_interval = 5
            max_checks = timeout // check_interval

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            export_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ onclick (—Å–∞–º—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ)
                "a[onclick*='exportReport']",
                "a[onclick*='EXCELOPENXML']",
                "a[onclick*='Excel']",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ ID –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                "a[id*='ctl04'][id*='ctl00']",
                "a[id*='ctl04'][id*='ctl100']",
                "a[id*='ctl05'][id*='ctl04']",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
                "a[class*='ActiveLink']",
                "a[class*='HoverButton']",
                "a[class*='Export']",
                "a[class*='Button']",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ title –∏ alt
                "a[title*='–≠–∫—Å–ø–æ—Ä—Ç']",
                "a[title*='Export']",
                "a[alt*='Excel']",
                "a[alt*='–≠–∫—Å–ø–æ—Ä—Ç']",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–µ–Ω—é
                "div[id*='Menu'] a",
                "div[class*='Menu'] a",
                "div[class*='HoverButton'] a",
                "div[class*='ToolbarExport'] a",
                "div[class*='WidgetSet'] a",
                "table[id*='Button'] a",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                "a:contains('Excel')",
                "a:contains('–≠–∫—Å–ø–æ—Ä—Ç')"
            ]

            for check_num in range(max_checks):
                self.logger.info(f"[excel_exporter] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {check_num + 1}/{max_checks} - –∏—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞...")

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
                export_button = self.find_export_button_by_text()
                if export_button:
                    self.logger.info("[excel_exporter] ‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É")
                    self.logger.info("[excel_exporter] ‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                    return True

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É, –ø—Ä–æ–±—É–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                for selector in export_selectors:
                    try:
                        export_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if export_button.is_displayed() and export_button.is_enabled():
                            self.logger.info(f"[excel_exporter] ‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                            self.logger.info("[excel_exporter] ‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                            return True
                    except:
                        continue

                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–µ–ª–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                if check_num == max_checks - 1:
                    self.logger.warning("[excel_exporter] ‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
                    self.diagnose_page_for_export()

                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                if check_num < max_checks - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    self.logger.info(f"[excel_exporter] ‚è≥ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º {check_interval} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(check_interval)

            self.logger.error(f"[excel_exporter] ‚ùå –û—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
            return False

        except Exception as e:
            self.logger.error(f"[excel_exporter] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def find_save_button(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            save_selectors = [
                "a[title*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "a[title*='Save']",
                "button[title*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "button[title*='Save']",
                "input[value*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "input[value*='Save']",
                "[class*='save']",
                "[id*='save']"
            ]

            for selector in save_selectors:
                try:
                    save_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if save_button.is_displayed() and save_button.is_enabled():
                        self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                        return save_button
                except:
                    continue

            self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

    def click_save_button(self):
        """–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            save_button = self.find_save_button()
            if not save_button:
                return False

            self.logger.info("üíæ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
            save_button.click()

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
            time.sleep(2)

            self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def select_excel_format(self):
        """–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            self.logger.info("[excel_exporter] üìä –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç Excel...")

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É Excel –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
            excel_selectors = [
                "a[onclick*='EXCELOPENXML']",
                "a[onclick*='Excel']",
                "a[alt*='Excel']",
                "a:contains('Excel')",
                "a[title*='Excel']"
            ]

            excel_link = None
            for selector in excel_selectors:
                try:
                    excel_link = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if excel_link.is_displayed() and excel_link.is_enabled():
                        break
                except:
                    continue

            if not excel_link:
                self.logger.error("[excel_exporter] ‚ùå –°—Å—ã–ª–∫–∞ Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é")
                return False

            # –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ Excel
            self.logger.info("[excel_exporter] üíæ –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç Excel...")
            excel_link.click()

            self.logger.info("[excel_exporter] ‚úÖ –§–æ—Ä–º–∞—Ç Excel –≤—ã–±—Ä–∞–Ω")
            return True

        except Exception as e:
            self.logger.error(f"[excel_exporter] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ Excel: {e}")
            return False

    def export_to_excel(self, wait_time=120):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel"""
        try:
            self.logger.info("[excel_exporter] üì§ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel...")

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ (–∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞)
            if not self.wait_for_report_ready(timeout=wait_time):
                return False

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ wait_for_report_ready)
            export_selectors = [
                "a[onclick*='exportReport']",
                "a[onclick*='EXCELOPENXML']",
                "a[onclick*='Excel']",
                "a[id*='Export']",
                "a[id*='ctl04'][id*='ctl00']",
                "a[id*='ctl04'][id*='ctl100']",
                "a[class*='ActiveLink']",
                "a[class*='Export']",
                "a[class*='Button']",
                "a[title*='–≠–∫—Å–ø–æ—Ä—Ç']",
                "a[title*='Export']",
                "a[alt*='Excel']",
                "a[alt*='–≠–∫—Å–ø–æ—Ä—Ç']",
                "div[id*='Export'] a",
                "div[class*='ToolbarExport'] a",
                "div[class*='WidgetSet'] a",
                "table[id*='Button'] a",
                "a:contains('Excel')",
                "a:contains('–≠–∫—Å–ø–æ—Ä—Ç')"
            ]

            export_button = None
            for selector in export_selectors:
                try:
                    export_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if export_button.is_displayed() and export_button.is_enabled():
                        break
                except:
                    continue

            if not export_button:
                self.logger.error("[excel_exporter] ‚ùå –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.logger.info("[excel_exporter] üíæ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞...")
            export_button.click()

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
            time.sleep(2)

            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç Excel
            if not self.select_excel_format():
                return False

            self.logger.info("[excel_exporter] ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"[excel_exporter] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            return False

    def find_export_button_by_text(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –º–µ–Ω—é (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
            self.logger.info("[excel_exporter] üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –º–µ–Ω—é...")

            menu_selectors = [
                "div[id*='Menu']",
                "div[class*='Menu']",
                "div[class*='HoverButton']"
            ]

            for menu_selector in menu_selectors:
                try:
                    menus = self.driver.find_elements(By.CSS_SELECTOR, menu_selector)
                    for menu in menus:
                        if menu.is_displayed():
                            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é
                            links = menu.find_elements(By.TAG_NAME, "a")
                            for link in links:
                                try:
                                    link_text = link.text.strip().lower()
                                    link_onclick = link.get_attribute('onclick') or ''

                                    if 'excel' in link_text or 'exportReport' in link_onclick:
                                        if link.is_displayed() and link.is_enabled():
                                            self.logger.info(f"[excel_exporter] ‚úÖ –ö–Ω–æ–ø–∫–∞ Excel –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é: '{link_text}'")
                                            return link
                                except:
                                    continue
                except:
                    continue

            # –ï—Å–ª–∏ –≤ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            self.logger.info("[excel_exporter] üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
            all_links = self.driver.find_elements(By.TAG_NAME, "a")

            for link in all_links:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                    link_text = link.text.strip().lower()
                    link_title = link.get_attribute('title') or ''
                    link_alt = link.get_attribute('alt') or ''
                    link_onclick = link.get_attribute('onclick') or ''

                    # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if any(keyword in link_text for keyword in ['excel', '—ç–∫—Å–ø–æ—Ä—Ç', 'export']):
                        if link.is_displayed() and link.is_enabled():
                            self.logger.info(f"[excel_exporter] ‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: '{link_text}'")
                            return link

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º title –∏ alt
                    if any(keyword in link_title.lower() for keyword in ['excel', '—ç–∫—Å–ø–æ—Ä—Ç', 'export']):
                        if link.is_displayed() and link.is_enabled():
                            self.logger.info(f"[excel_exporter] ‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ title: '{link_title}'")
                            return link

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º onclick
                    if 'exportReport' in link_onclick or 'EXCELOPENXML' in link_onclick:
                        if link.is_displayed() and link.is_enabled():
                            self.logger.info(f"[excel_exporter] ‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ onclick: '{link_onclick}'")
                            return link

                except:
                    continue

            return None

        except Exception as e:
            self.logger.error(f"[excel_exporter] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
            return False

    def diagnose_page_for_export(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –ø–æ—á–µ–º—É –∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è"""
        try:
            self.logger.info("[excel_exporter] üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞...")

            # –ò—â–µ–º –≤—Å–µ div —Å –∫–ª–∞—Å—Å–æ–º Menu
            menu_divs = self.driver.find_elements(By.CSS_SELECTOR, "div[class*='Menu']")
            self.logger.info(f"[excel_exporter] üìä –ù–∞–π–¥–µ–Ω–æ div —Å –∫–ª–∞—Å—Å–æ–º Menu: {len(menu_divs)}")

            for i, menu in enumerate(menu_divs):
                try:
                    menu_id = menu.get_attribute('id') or '–±–µ–∑ ID'
                    menu_class = menu.get_attribute('class') or '–±–µ–∑ –∫–ª–∞—Å—Å–∞'
                    menu_style = menu.get_attribute('style') or '–±–µ–∑ —Å—Ç–∏–ª—è'
                    is_visible = menu.is_displayed()

                    self.logger.info(f"[excel_exporter] üìã Menu {i+1}: ID='{menu_id}', Class='{menu_class}', Visible={is_visible}")
                    if 'display: block' in menu_style:
                        self.logger.info(f"[excel_exporter] ‚úÖ Menu {i+1} –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è (display: block)")

                    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é
                    links = menu.find_elements(By.TAG_NAME, "a")
                    self.logger.info(f"[excel_exporter] üîó –í Menu {i+1} –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")

                    for j, link in enumerate(links):
                        try:
                            link_text = link.text.strip()
                            link_onclick = link.get_attribute('onclick') or '–±–µ–∑ onclick'
                            link_alt = link.get_attribute('alt') or '–±–µ–∑ alt'
                            link_title = link.get_attribute('title') or '–±–µ–∑ title'
                            link_visible = link.is_displayed()

                            self.logger.info(f"[excel_exporter]   –°—Å—ã–ª–∫–∞ {j+1}: '{link_text}', onclick='{link_onclick}', alt='{link_alt}', title='{link_title}', visible={link_visible}")

                            if 'exportReport' in link_onclick:
                                self.logger.info(f"[excel_exporter] üéØ –ù–ê–ô–î–ï–ù–ê –ö–ù–û–ü–ö–ê –≠–ö–°–ü–û–†–¢–ê! –°—Å—ã–ª–∫–∞ {j+1} –≤ Menu {i+1}")

                        except Exception as e:
                            self.logger.error(f"[excel_exporter] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Å—ã–ª–∫–∏ {j+1}: {e}")

                except Exception as e:
                    self.logger.error(f"[excel_exporter] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Menu {i+1}: {e}")

            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_links = self.driver.find_elements(By.TAG_NAME, "a")
            self.logger.info(f"[excel_exporter] üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(all_links)}")

            export_links = []
            for link in all_links:
                try:
                    link_text = link.text.strip()
                    link_onclick = link.get_attribute('onclick') or ''

                    if 'excel' in link_text.lower() or 'exportReport' in link_onclick:
                        export_links.append({
                            'text': link_text,
                            'onclick': link_onclick,
                            'visible': link.is_displayed(),
                            'enabled': link.is_enabled()
                        })

                except:
                    continue

            self.logger.info(f"[excel_exporter] üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞: {len(export_links)}")
            for i, link_info in enumerate(export_links):
                self.logger.info(f"[excel_exporter]   –≠–∫—Å–ø–æ—Ä—Ç {i+1}: '{link_info['text']}', onclick='{link_info['onclick']}', visible={link_info['visible']}, enabled={link_info['enabled']}")

            return True

        except Exception as e:
            self.logger.error(f"[excel_exporter] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
