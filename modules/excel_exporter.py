"""
–ú–æ–¥—É–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel
"""
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from loguru import logger


class ExcelExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel"""

    def __init__(self, driver, logger_instance=None):
        self.driver = driver
        self.logger = logger_instance or logger

    def wait_for_report_ready(self, timeout=120):
        """–î–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º"""
        try:
            self.logger.info("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ timeout
            check_interval = 5
            max_checks = timeout // check_interval

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            export_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ onclick
                "a[onclick*='exportReport']",
                "a[onclick*='EXCELOPENXML']",
                "a[onclick*='Excel']",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ ID (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                "a[id*='ctl05'][id*='ctl104'][id*='ctl100']",
                "a[id*='ctl05'][id*='ctl04'][id*='ctl00']",
                "a[id*='ctl05'][id*='ctl04'][id*='ctl100']",
                "a[id*='Export']",
                "a[id*='ctl04'][id*='ctl00']",
                "a[id*='ctl04'][id*='ctl100']",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ alt –∞—Ç—Ä–∏–±—É—Ç—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                "a[alt='–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–≥–æ—Å—è –º–µ–Ω—é']",
                "a[alt*='–≠–∫—Å–ø–æ—Ä—Ç']",
                "a[alt*='Export']",
                "a[alt*='—ç–∫—Å–ø–æ—Ä—Ç']",
                "a[alt*='export']",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ title –∏ alt
                "a[title*='–≠–∫—Å–ø–æ—Ä—Ç']",
                "a[title*='Export']",
                "a[title*='—ç–∫—Å–ø–æ—Ä—Ç']",
                "a[title*='export']",
                "a[alt*='Excel']",
                "a[alt*='–≠–∫—Å–ø–æ—Ä—Ç']",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
                "a[class*='ActiveLink']",
                "a[class*='Export']",
                "a[class*='Button']",
                "a[class*='DisabledButton']",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                "div[id*='ctl05'][id*='ctl104'] a",
                "div[class*='DisabledButton'] a",
                "div[id*='Export'] a",
                "div[class*='ToolbarExport'] a",
                "div[class*='WidgetSet'] a",
                "table[id*='Button'] a",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                "a:contains('Excel')",
                "a:contains('–≠–∫—Å–ø–æ—Ä—Ç')",
                "a:contains('Export')"
            ]

            for check_num in range(max_checks):
                self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {check_num + 1}/{max_checks} - –∏—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞...")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–∏–∫–æ–Ω–∫–∞ –¥–∏—Å–∫–µ—Ç—ã - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
                export_button = self.find_export_button_by_image()
                if export_button:
                    self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
                    self.logger.info("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                    return True
                
                # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                export_button = self.find_export_button_by_text()
                if export_button:
                    self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É")
                    self.logger.info("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                    return True
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ —Ç–µ–∫—Å—Ç—É, –ø—Ä–æ–±—É–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                for selector in export_selectors:
                    try:
                        export_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if export_button.is_displayed() and export_button.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                            self.logger.info("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                            return True
                    except:
                        continue
                
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                if check_num < max_checks - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    self.logger.info(f"‚è≥ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º {check_interval} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(check_interval)

            self.logger.error(f"‚ùå –û—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def find_save_button(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            save_button = self.driver.find_element(By.CSS_SELECTOR, "a[title*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'], a[title*='Save'], button[title*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'], button[title*='Save']")
            self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞")
            return save_button
        except:
            self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

    def click_save_button(self):
        """–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            save_button = self.find_save_button()
            if save_button:
                save_button.click()
                self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def select_excel_format(self):
        """–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É Excel –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            excel_selectors = [
                "a[onclick*='EXCELOPENXML']",
                "a[title*='Excel']",
                "a[alt*='Excel']",
                "a:contains('Excel')"
            ]

            for selector in excel_selectors:
                try:
                    excel_link = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if excel_link.is_displayed() and excel_link.is_enabled():
                        self.logger.info("‚úÖ –°—Å—ã–ª–∫–∞ Excel –Ω–∞–π–¥–µ–Ω–∞")
                        excel_link.click()
                        self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç Excel –≤—ã–±—Ä–∞–Ω")
                        return True
                except:
                    continue

            self.logger.error("‚ùå –°—Å—ã–ª–∫–∞ Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ Excel: {e}")
            return False

    def export_to_excel(self, wait_time=120):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel"""
        try:
            self.logger.info("üì§ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel...")

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ (–∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞)
            if not self.wait_for_report_ready(timeout=wait_time):
                return False

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ wait_for_report_ready)
            export_selectors = [
                "a[onclick*='exportReport']",
                "a[onclick*='EXCELOPENXML']",
                "a[onclick*='Excel']",
                "a[id*='Export']",
                "a[id*='ctl04'][id*='ctl00']",
                "a[id*='ctl04'][id*='ctl100']",
                "a[class*='ActiveLink']",
                "a[class*='Export']",
                "a[class*='Button']",
                "a[title*='–≠–∫—Å–ø–æ—Ä—Ç']",
                "a[title*='Export']",
                "a[alt*='Excel']",
                "a[alt*='–≠–∫—Å–ø–æ—Ä—Ç']",
                "div[id*='Export'] a",
                "div[class*='ToolbarExport'] a",
                "div[class*='WidgetSet'] a",
                "table[id*='Button'] a",
                "a:contains('Excel')",
                "a:contains('–≠–∫—Å–ø–æ—Ä—Ç')"
            ]

            export_button = None
            for selector in export_selectors:
                try:
                    export_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if export_button.is_displayed() and export_button.is_enabled():
                        break
                except:
                    continue

            if not export_button:
                self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.logger.info("üíæ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞...")
            export_button.click()

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
            time.sleep(2)

            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç Excel
            if not self.select_excel_format():
                return False

            self.logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            return False

    def find_export_button_by_text(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)"""
        try:
            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_links = self.driver.find_elements(By.TAG_NAME, "a")
            
            for link in all_links:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                    link_text = link.text.strip().lower()
                    link_title = link.get_attribute('title') or ''
                    link_alt = link.get_attribute('alt') or ''
                    link_onclick = link.get_attribute('onclick') or ''
                    
                    # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if any(keyword in link_text for keyword in ['excel', '—ç–∫—Å–ø–æ—Ä—Ç', 'export']):
                        if link.is_displayed() and link.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: '{link_text}'")
                            return link
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º title –∏ alt
                    if any(keyword in link_title.lower() for keyword in ['excel', '—ç–∫—Å–ø–æ—Ä—Ç', 'export']):
                        if link.is_displayed() and link.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ title: '{link_title}'")
                            return link
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º onclick
                    if 'exportReport' in link_onclick or 'EXCELOPENXML' in link_onclick:
                        if link.is_displayed() and link.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ onclick: '{link_onclick}'")
                            return link
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º alt –∞—Ç—Ä–∏–±—É—Ç (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                    if any(keyword in link_alt.lower() for keyword in ['—ç–∫—Å–ø–æ—Ä—Ç', 'export', '—Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–≥–æ—Å—è –º–µ–Ω—é']):
                        if link.is_displayed() and link.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ alt: '{link_alt}'")
                            return link
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Å—Å—ã–ª–∫–∏ (–∏–∫–æ–Ω–∫–∞ –¥–∏—Å–∫–µ—Ç—ã)
                    try:
                        img_elements = link.find_elements(By.TAG_NAME, "img")
                        for img in img_elements:
                            img_src = img.get_attribute('src') or ''
                            img_alt = img.get_attribute('alt') or ''
                            
                            # –ò—â–µ–º –∏–∫–æ–Ω–∫—É –¥–∏—Å–∫–µ—Ç—ã –ø–æ src (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                            if 'Icons.Save' in img_src or 'ReportServer/Reserved.ReportV' in img_src:
                                if link.is_displayed() and link.is_enabled():
                                    self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: '{img_src}'")
                                    return link
                            
                            # –ò—â–µ–º –ø–æ alt –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            if any(keyword in img_alt.lower() for keyword in ['—ç–∫—Å–ø–æ—Ä—Ç', 'export', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'save']):
                                if link.is_displayed() and link.is_enabled():
                                    self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ alt –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '{img_alt}'")
                                    return link
                    except:
                        continue
                            
                except:
                    continue
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
            return None

    def find_export_button_by_image(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∫–æ–Ω–∫–∏ –¥–∏—Å–∫–µ—Ç—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)"""
        try:
            self.logger.info("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∫–æ–Ω–∫–∏ –¥–∏—Å–∫–µ—Ç—ã...")
            
            # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_images = self.driver.find_elements(By.TAG_NAME, "img")
            
            for img in all_images:
                try:
                    img_src = img.get_attribute('src') or ''
                    img_alt = img.get_attribute('alt') or ''
                    img_id = img.get_attribute('id') or ''
                    
                    # –ò—â–µ–º –∏–∫–æ–Ω–∫—É –¥–∏—Å–∫–µ—Ç—ã –ø–æ src (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                    if 'Icons.Save' in img_src or 'ReportServer/Reserved.ReportV' in img_src:
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –¥–∏—Å–∫–µ—Ç—ã: {img_src}")
                        
                        # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Å—ã–ª–∫—É
                        parent_link = img.find_element(By.XPATH, "./ancestor::a")
                        if parent_link and parent_link.is_displayed() and parent_link.is_enabled():
                            self.logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
                            return parent_link
                        else:
                            self.logger.warning("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                    
                    # –ò—â–µ–º –ø–æ alt –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if any(keyword in img_alt.lower() for keyword in ['—ç–∫—Å–ø–æ—Ä—Ç', 'export', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'save', '–¥–∏—Å–∫–µ—Ç–∞']):
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –ø–æ alt: '{img_alt}'")
                        
                        # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Å—ã–ª–∫—É
                        try:
                            parent_link = img.find_element(By.XPATH, "./ancestor::a")
                            if parent_link and parent_link.is_displayed() and parent_link.is_enabled():
                                self.logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ alt –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                                return parent_link
                        except:
                            self.logger.warning("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
                    # –ò—â–µ–º –ø–æ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                    if 'ButtonImg' in img_id or 'ctl100' in img_id:
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –ø–æ ID: {img_id}")
                        
                        # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Å—ã–ª–∫—É
                        try:
                            parent_link = img.find_element(By.XPATH, "./ancestor::a")
                            if parent_link and parent_link.is_displayed() and parent_link.is_enabled():
                                self.logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                                return parent_link
                        except:
                            self.logger.warning("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                            
                except Exception as e:
                    continue
            
            self.logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {e}")
            return None
