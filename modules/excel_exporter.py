"""
–ú–æ–¥—É–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel
"""

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import JavascriptException, WebDriverException
import logging
import time


class ExcelExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ Excel"""

    def __init__(self, driver, logger):
        self.driver = driver
        self.logger = logger

    def wait_for_report_ready(self, timeout=120):
        """–î–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º"""
        try:
            self.logger.info("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ timeout
            check_interval = 5
            max_checks = timeout // check_interval

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            export_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ onclick
                "a[onclick*='exportReport']",
                "a[onclick*='EXCELOPENXML']",
                "a[onclick*='Excel']",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ ID
                "a[id*='Export']",
                "a[id*='ctl04'][id*='ctl00']",
                "a[id*='ctl04'][id*='ctl100']",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
                "a[class*='ActiveLink']",
                "a[class*='Export']",
                "a[class*='Button']",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ title –∏ alt
                "a[title*='–≠–∫—Å–ø–æ—Ä—Ç']",
                "a[title*='Export']",
                "a[alt*='Excel']",
                "a[alt*='–≠–∫—Å–ø–æ—Ä—Ç']",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                "div[id*='Export'] a",
                "div[class*='ToolbarExport'] a",
                "div[class*='WidgetSet'] a",
                "table[id*='Button'] a",

                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                "a:contains('Excel')",
                "a:contains('–≠–∫—Å–ø–æ—Ä—Ç')"
            ]

            for check_num in range(max_checks):
                self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {check_num + 1}/{max_checks} - –∏—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞...")

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
                export_button = self.find_export_button_by_text()
                if export_button:
                    self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É")
                    self.logger.info("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                    return True

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É, –ø—Ä–æ–±—É–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                for selector in export_selectors:
                    try:
                        export_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if export_button.is_displayed() and export_button.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                            self.logger.info("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                            return True
                    except:
                        continue

                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                if check_num < max_checks - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    self.logger.info(f"‚è≥ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º {check_interval} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(check_interval)

            self.logger.error(f"‚ùå –û—Ç—á–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def find_save_button(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            save_selectors = [
                "a[title*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "a[title*='Save']",
                "button[title*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "button[title*='Save']",
                "input[value*='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']",
                "input[value*='Save']",
                "[class*='save']",
                "[id*='save']"
            ]

            for selector in save_selectors:
                try:
                    save_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if save_button.is_displayed() and save_button.is_enabled():
                        self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                        return save_button
                except:
                    continue

            self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

    def click_save_button(self):
        """–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            save_button = self.find_save_button()
            if not save_button:
                return False

            self.logger.info("üíæ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
            save_button.click()

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
            time.sleep(2)

            self.logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def select_excel_format(self):
        """–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é"""
        try:
            self.logger.info("üìä –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç Excel...")

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Excel –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
            excel_selectors = [
                "a[href*='Excel']",
                "a[title*='Excel']",
                "a[title*='excel']",
                "a[title*='–≠–∫—Å–µ–ª—å']",
                "a[title*='—ç–∫—Å–µ–ª—å']"
            ]

            for selector in excel_selectors:
                try:
                    excel_link = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if excel_link.is_displayed():
                        self.logger.info("‚úÖ –°—Å—ã–ª–∫–∞ Excel –Ω–∞–π–¥–µ–Ω–∞")
                        excel_link.click()
                        self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç Excel –≤—ã–±—Ä–∞–Ω")
                        return True
                except:
                    continue

            # –ü–æ–∏—Å–∫ –ø–æ XPath (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
            try:
                excel_link = self.driver.find_element(By.XPATH, "//a[contains(text(), 'Excel') or contains(text(), 'excel') or contains(text(), '–≠–∫—Å–µ–ª—å') or contains(text(), '—ç–∫—Å–µ–ª—å')]")
                if excel_link.is_displayed():
                    self.logger.info("‚úÖ –°—Å—ã–ª–∫–∞ Excel –Ω–∞–π–¥–µ–Ω–∞ –ø–æ XPath")
                    excel_link.click()
                    self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç Excel –≤—ã–±—Ä–∞–Ω")
                    return True
            except:
                pass

            # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é href
            try:
                excel_link = self.driver.find_element(By.XPATH, "//a[contains(@href, 'Excel') or contains(@href, 'excel')]")
                if excel_link.is_displayed():
                    self.logger.info("‚úÖ –°—Å—ã–ª–∫–∞ Excel –Ω–∞–π–¥–µ–Ω–∞ –ø–æ href")
                    excel_link.click()
                    self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç Excel –≤—ã–±—Ä–∞–Ω")
                    return True
            except:
                pass

            self.logger.error("‚ùå –°—Å—ã–ª–∫–∞ Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é")
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ Excel: {e}")
            return False

    def export_to_excel(self, wait_time=120):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            self.logger.info("üì§ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel...")

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
            if not self.wait_for_report_ready(timeout=wait_time):
                return False

            # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞...")
            export_elements = self.find_export_elements_via_js()

            # 2. –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Ç–µ—Å—Ç–µ)
            self.logger.info("üöÄ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ JavaScript...")
            if self.click_excel_export_via_js():
                self.logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ JavaScript")
                return True

            # 3. –ï—Å–ª–∏ JavaScript –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            self.logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ Selenium...")

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            export_button = self.find_export_button_by_text()
            if not export_button:
                self.logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
                return False

            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.logger.info("üíæ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Selenium...")
            try:
                export_button.click()
            except Exception as click_error:
                self.logger.warning(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {click_error}")
                # –ü—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                try:
                    self.driver.execute_script("arguments[0].click();", export_button)
                    self.logger.info("‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ JavaScript")
                except Exception as js_click_error:
                    self.logger.error(f"‚ùå JavaScript –∫–ª–∏–∫ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {js_click_error}")
                    return False

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            time.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel –∏–∑ –º–µ–Ω—é
            if not self.select_excel_format():
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç Excel –∏–∑ –º–µ–Ω—é, –≤–æ–∑–º–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

            self.logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            return False

    def find_excel_export_via_js(self):
        """–ù–∞–π—Ç–∏ Excel –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ JavaScript (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–∫—Ä–∏–ø—Ç–µ)"""
        try:
            self.logger.info("üîç –ò—â–µ–º Excel –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ JavaScript...")

            # JavaScript –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ Excel –∫–Ω–æ–ø–∫–∏ (–æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤–∞—à–µ–º —Ç–µ—Å—Ç–µ)
            js_code = """
            // 1. –ù–∞—Ö–æ–¥–∏–º Excel –∫–Ω–æ–ø–∫—É
            const excelLink = document.querySelector('a.ActiveLink[text="Excel"]') ||
                              Array.from(document.querySelectorAll('a.ActiveLink')).find(el => el.textContent.includes('Excel'));

            if (excelLink) {
                return {
                    found: true,
                    element: excelLink,
                    text: excelLink.textContent,
                    className: excelLink.className,
                    onclick: excelLink.onclick ? excelLink.onclick.toString() : null,
                    isVisible: excelLink.offsetParent !== null &&
                              excelLink.style.display !== 'none' &&
                              excelLink.style.visibility !== 'hidden'
                };
            }

            // 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ exportReport —Ñ—É–Ω–∫—Ü–∏—è–º
            const exportElements = Array.from(document.querySelectorAll('*')).filter(el => {
                const onclick = el.onclick ? el.onclick.toString() : '';
                return onclick.includes('exportReport') && onclick.includes('EXCELOPENXML');
            });

            if (exportElements.length > 0) {
                const excelElement = exportElements.find(el =>
                    el.textContent.includes('Excel') || el.textContent.includes('excel')
                );

                if (excelElement) {
                    return {
                        found: true,
                        element: excelElement,
                        text: excelElement.textContent,
                        className: excelElement.className,
                        onclick: excelElement.onclick.toString(),
                        isVisible: excelElement.offsetParent !== null
                    };
                }
            }

            return { found: false };
            """

            # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript
            result = self.driver.execute_script(js_code)

            if result and result.get('found'):
                self.logger.info(f"‚úÖ Excel –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ JS: {result.get('text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                self.logger.info(f"üìä –í–∏–¥–∏–º–æ—Å—Ç—å: {result.get('isVisible', False)}")
                self.logger.info(f"üìã OnClick: {result.get('onclick', '–ù–µ—Ç')}")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º WebElement (JavaScript –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç)
                return result.get('element')
            else:
                self.logger.warning("‚ö†Ô∏è Excel –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript")
                return None

        except JavascriptException as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript: {e}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ JavaScript: {e}")
            return None

    def find_export_elements_via_js(self):
        """–ù–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å exportReport —á–µ—Ä–µ–∑ JavaScript"""
        try:
            self.logger.info("üîç –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å exportReport...")

            js_code = """
            const exportElements = Array.from(document.querySelectorAll('*')).filter(el => {
                const onclick = el.onclick ? el.onclick.toString() : '';
                return onclick.includes('exportReport');
            });

            return exportElements.map((el, i) => ({
                index: i + 1,
                tag: el.tagName,
                text: el.textContent.trim(),
                onclick: el.onclick ? el.onclick.toString() : null,
                className: el.className,
                id: el.id
            }));
            """

            elements = self.driver.execute_script(js_code)

            if elements:
                self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å exportReport:")
                for element in elements:
                    self.logger.info(f"  ‚Ä¢ {element['index']}: {element['tag']} - '{element['text'][:50]}{'...' if len(element['text']) > 50 else ''}'")

            return elements

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ JavaScript: {e}")
            return []

    def click_excel_export_via_js(self):
        """–ù–∞–∂–∞—Ç—å –Ω–∞ Excel —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ JavaScript"""
        try:
            self.logger.info("üñ±Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∂–∞—Ç—å Excel —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ JavaScript...")

            js_code = """
            // 1. –ù–∞—Ö–æ–¥–∏–º Excel –∫–Ω–æ–ø–∫—É
            const excelLink = document.querySelector('a.ActiveLink[text="Excel"]') ||
                              Array.from(document.querySelectorAll('a.ActiveLink')).find(el => el.textContent.includes('Excel'));

            if (excelLink) {
                try {
                    excelLink.click();
                    return { success: true, method: 'ActiveLink', text: excelLink.textContent };
                } catch (e) {
                    return { success: false, error: e.message, method: 'ActiveLink' };
                }
            }

            // 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–∏—Å–∫ –ø–æ exportReport
            const exportElements = Array.from(document.querySelectorAll('*')).filter(el => {
                const onclick = el.onclick ? el.onclick.toString() : '';
                return onclick.includes('exportReport') && onclick.includes('EXCELOPENXML');
            });

            if (exportElements.length > 0) {
                const excelElement = exportElements.find(el =>
                    el.textContent.includes('Excel') || el.textContent.includes('excel')
                );

                if (excelElement) {
                    try {
                        excelElement.click();
                        return { success: true, method: 'exportReport', text: excelElement.textContent };
                    } catch (e) {
                        return { success: false, error: e.message, method: 'exportReport' };
                    }
                }
            }

            // 3. –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ exportReport, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ ReportViewerControl
            try {
                if (typeof $find !== 'undefined') {
                    const control = $find('ReportViewerControl');
                    if (control && control.exportReport) {
                        control.exportReport('EXCELOPENXML');
                        return { success: true, method: 'direct_call' };
                    }
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã
            }

            return { success: false, error: 'Excel –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
            """

            result = self.driver.execute_script(js_code)

            if result and result.get('success'):
                method = result.get('method', 'unknown')
                text = result.get('text', '')
                self.logger.info(f"‚úÖ Excel —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ {method}: '{text}'")
                return True
            else:
                error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Excel —ç–∫—Å–ø–æ—Ä—Ç: {error}")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ —á–µ—Ä–µ–∑ JavaScript: {e}")
            return False

    def find_export_button_by_text(self):
        """–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JavaScript (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            js_element = self.find_excel_export_via_js()
            if js_element:
                return js_element

            # –ï—Å–ª–∏ JavaScript –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            self.logger.info("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫...")

            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_links = self.driver.find_elements(By.TAG_NAME, "a")

            for link in all_links:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                    link_text = link.text.strip().lower()
                    link_title = link.get_attribute('title') or ''
                    link_alt = link.get_attribute('alt') or ''
                    link_onclick = link.get_attribute('onclick') or ''

                    # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if any(keyword in link_text for keyword in ['excel', '—ç–∫—Å–ø–æ—Ä—Ç', 'export']):
                        # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É is_displayed() - —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç, –Ω–æ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
                        if link.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: '{link_text}'")
                            return link

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º onclick –Ω–∞ –Ω–∞–ª–∏—á–∏–µ exportReport
                    if 'exportReport' in link_onclick and 'EXCELOPENXML' in link_onclick:
                        if link.is_enabled():
                            self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ onclick: '{link_onclick[:100]}...'")
                            return link

                except:
                    continue

            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
            return None

    def run_excel_export_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel (–∫–∞–∫ –≤–∞—à JavaScript —Ç–µ—Å—Ç)"""
        try:
            self.logger.info("=== üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EXCEL –≠–ö–°–ü–û–†–¢–ê ===")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ç –∂–µ JavaScript –∫–æ–¥, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º —Ç–µ—Å—Ç–µ
            js_test_code = """
            console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EXCEL –≠–ö–°–ü–û–†–¢–ê ===');

            // 1. –ù–∞—Ö–æ–¥–∏–º Excel –∫–Ω–æ–ø–∫—É
            const excelLink = document.querySelector('a.ActiveLink[text="Excel"]') ||
                              Array.from(document.querySelectorAll('a.ActiveLink')).find(el => el.textContent.includes('Excel'));

            const result = {
                excelLinkFound: !!excelLink,
                excelLinkInfo: null,
                parentDropdown: null,
                isVisible: false,
                clickResult: null,
                exportElements: []
            };

            if (excelLink) {
                result.excelLinkInfo = {
                    text: excelLink.textContent,
                    className: excelLink.className,
                    onclick: excelLink.onclick ? excelLink.onclick.toString() : null,
                    style: excelLink.style.cssText
                };

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π dropdown
                result.parentDropdown = excelLink.closest('[class*="Menu"], [class*="dropdown"], [class*="MenuBar"]');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                result.isVisible = excelLink.offsetParent !== null &&
                                 excelLink.style.display !== 'none' &&
                                 excelLink.style.visibility !== 'hidden';
            }

            // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å exportReport
            const exportElements = Array.from(document.querySelectorAll('*')).filter(el => {
                const onclick = el.onclick ? el.onclick.toString() : '';
                return onclick.includes('exportReport');
            });

            result.exportElements = exportElements.map((el, i) => ({
                index: i + 1,
                tag: el.tagName,
                text: el.textContent.trim(),
                onclick: el.onclick.toString()
            }));

            return result;
            """

            test_result = self.driver.execute_script(js_test_code)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            if test_result:
                self.logger.info(f"üìä Excel —Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {test_result.get('excelLinkFound', False)}")

                if test_result.get('excelLinkInfo'):
                    info = test_result['excelLinkInfo']
                    self.logger.info(f"üìã Excel —Å—Å—ã–ª–∫–∞:")
                    self.logger.info(f"   ‚Ä¢ –¢–µ–∫—Å—Ç: {info.get('text', '–ù–µ—Ç')}")
                    self.logger.info(f"   ‚Ä¢ –ö–ª–∞—Å—Å: {info.get('className', '–ù–µ—Ç')}")
                    self.logger.info(f"   ‚Ä¢ OnClick: {info.get('onclick', '–ù–µ—Ç')[:100] if info.get('onclick') else '–ù–µ—Ç'}...")

                self.logger.info(f"üëÅÔ∏è Excel –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞: {test_result.get('isVisible', False)}")

                export_elements = test_result.get('exportElements', [])
                self.logger.info(f"üìã –≠–ª–µ–º–µ–Ω—Ç—ã —Å exportReport: {len(export_elements)}")

                for element in export_elements[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    text_preview = element['text'][:50] + '...' if len(element['text']) > 50 else element['text']
                    self.logger.info(f"   ‚Ä¢ {element['index']}: {element['tag']} - '{text_preview}'")

                if len(export_elements) > 5:
                    self.logger.info(f"   ... –∏ –µ—â–µ {len(export_elements) - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

            return test_result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
            return None
