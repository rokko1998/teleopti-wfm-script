#!/usr/bin/env python3
"""
page_analyzer.py ‚Äî –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
"""

import os
import logging
from datetime import datetime
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class PageAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""

    def __init__(self, driver, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.

        Args:
            driver: WebDriver —ç–∫–∑–µ–º–ø–ª—è—Ä
            logger: –õ–æ–≥–≥–µ—Ä (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π)
        """
        self.driver = driver
        self.logger = logger or logging.getLogger(__name__)

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_dir = "analysis"
        self._ensure_analysis_dir()

    def _ensure_analysis_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
        if not os.path.exists(self.analysis_dir):
            os.makedirs(self.analysis_dir)
            self.logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {self.analysis_dir}")

    def get_page_html_structure(self, filename=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"page_structure_analysis_{timestamp}.html"

            filepath = os.path.join(self.analysis_dir, filename)

            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            html_content = self.driver.page_source

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(html_content)

            self.logger.info(f"‚úÖ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {filepath}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            self.analyze_html_elements()

            return filepath

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return None

    def analyze_html_elements(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç—ã...")

            # 1. –ò—â–µ–º ReportViewer —ç–ª–µ–º–µ–Ω—Ç—ã
            report_elements = self.driver.find_elements(By.CLASS_NAME, "ReportViewer")
            self.logger.info(f"üìä ReportViewer —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(report_elements)}")

            # 2. –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
            data_tables = self.driver.find_elements(By.TAG_NAME, "table")
            self.logger.info(f"üìã –¢–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data_tables)}")

            # 3. –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_elements = self.driver.find_elements(By.XPATH,
                "//*[contains(@class, 'pagination') or contains(@id, 'pagination')]")
            self.logger.info(f"üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {len(pagination_elements)}")

            # 4. –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_elements = self.driver.find_elements(By.XPATH,
                "//*[contains(text(), 'Excel') or contains(text(), 'Export') or contains(text(), '–í—ã–≥—Ä—É–∑–∫–∞')]")
            self.logger.info(f"üì§ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞: {len(export_elements)}")

            # 5. –ò—â–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
            hidden_fields = self.driver.find_elements(By.XPATH, "//input[@type='hidden']")
            self.logger.info(f"üîí –°–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π: {len(hidden_fields)}")

            # 6. –ò—â–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            submit_buttons = self.driver.find_elements(By.XPATH, "//input[@type='submit']")
            self.logger.info(f"üîò –ö–Ω–æ–ø–æ–∫: {len(buttons) + len(submit_buttons)}")

            # 7. –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            input_fields = self.driver.find_elements(By.TAG_NAME, "input")
            select_fields = self.driver.find_elements(By.TAG_NAME, "select")
            self.logger.info(f"‚úèÔ∏è –ü–æ–ª–µ–π –≤–≤–æ–¥–∞: {len(input_fields) + len(select_fields)}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            self._save_analysis_results({
                'report_elements': len(report_elements),
                'data_tables': len(data_tables),
                'pagination_elements': len(pagination_elements),
                'export_elements': len(export_elements),
                'hidden_fields': len(hidden_fields),
                'buttons': len(buttons) + len(submit_buttons),
                'input_fields': len(input_fields) + len(select_fields)
            })

            self.logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")

    def _save_analysis_results(self, results):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª."""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"page_analysis_{timestamp}.txt"
            filepath = os.path.join(self.analysis_dir, filename)

            with open(filepath, 'w', encoding='utf-8') as f:
                f.write("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –°–¢–†–ê–ù–ò–¶–´ ===\n")
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"URL: {self.driver.current_url}\n\n")

                for key, value in results.items():
                    f.write(f"{key}: {value}\n")

            self.logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filepath}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def find_element_by_text(self, text, tag_name=None):
        """
        –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É.

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            tag_name: –¢–∏–ø —Ç–µ–≥–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)

        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        try:
            if tag_name:
                xpath = f"//{tag_name}[contains(text(), '{text}')]"
            else:
                xpath = f"//*[contains(text(), '{text}')]"

            elements = self.driver.find_elements(By.XPATH, xpath)
            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º '{text}': {len(elements)}")

            return elements

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
            return []

    def find_element_by_class(self, class_name):
        """
        –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Å—É.

        Args:
            class_name: –ò–º—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        try:
            elements = self.driver.find_elements(By.CLASS_NAME, class_name)
            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º '{class_name}': {len(elements)}")

            return elements

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫–ª–∞—Å—Å—É: {e}")
            return []

    def get_element_info(self, element):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ.

        Args:
            element: WebElement –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
        """
        try:
            info = {
                'tag_name': element.tag_name,
                'text': element.text.strip() if element.text else '',
                'class': element.get_attribute('class'),
                'id': element.get_attribute('id'),
                'name': element.get_attribute('name'),
                'type': element.get_attribute('type'),
                'value': element.get_attribute('value'),
                'style': element.get_attribute('style'),
                'onclick': element.get_attribute('onclick')
            }

            return info

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ: {e}")
            return {}

    def wait_for_element(self, by, value, timeout=10):
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

        Args:
            by: –°–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ (By.ID, By.CLASS_NAME, etc.)
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            WebElement: –ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ None
        """
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, value))
            )
            self.logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {by} = {value}")
            return element

        except Exception as e:
            self.logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {by} = {value}, –æ—à–∏–±–∫–∞: {e}")
            return None
