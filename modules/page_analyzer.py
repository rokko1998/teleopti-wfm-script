#!/usr/bin/env python3
"""
page_analyzer.py ‚Äî –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
"""

import os
import logging
from datetime import datetime
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class PageAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""

    def __init__(self, driver, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.

        Args:
            driver: WebDriver —ç–∫–∑–µ–º–ø–ª—è—Ä
            logger: –õ–æ–≥–≥–µ—Ä (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π)
        """
        self.driver = driver
        self.logger = logger or logging.getLogger(__name__)

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_dir = "analysis"
        self._ensure_analysis_dir()

    def _ensure_analysis_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
        if not os.path.exists(self.analysis_dir):
            os.makedirs(self.analysis_dir)
            self.logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {self.analysis_dir}")

    def analyze_form_elements(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º...")

            # 1. –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
            input_fields = self.driver.find_elements(By.TAG_NAME, "input")
            self.logger.info(f"‚úèÔ∏è –ü–æ–ª–µ–π –≤–≤–æ–¥–∞: {len(input_fields)}")

            # 2. –ò—â–µ–º –≤—Å–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
            select_fields = self.driver.find_elements(By.TAG_NAME, "select")
            self.logger.info(f"üìã –í—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤: {len(select_fields)}")

            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            for i, field in enumerate(input_fields[:10]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
                field_info = self.get_element_info(field)
                if field_info.get('type') in ['text', 'date', 'datetime-local']:
                    self.logger.info(f"üìù –ü–æ–ª–µ {i+1}: {field_info.get('placeholder', '–ë–µ–∑ placeholder')} "
                                   f"(ID: {field_info.get('id', '–ù–µ—Ç ID')}, "
                                   f"Name: {field_info.get('name', '–ù–µ—Ç name')})")

            # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
            for i, field in enumerate(select_fields[:5]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ø–∏—Å–∫–æ–≤
                field_info = self.get_element_info(field)
                options = field.find_elements(By.TAG_NAME, "option")
                option_texts = [opt.text.strip() for opt in options if opt.text.strip()]

                self.logger.info(f"üìã –°–ø–∏—Å–æ–∫ {i+1}: {field_info.get('placeholder', '–ë–µ–∑ placeholder')} "
                               f"(ID: {field_info.get('id', '–ù–µ—Ç ID')}, "
                               f"Name: {field_info.get('name', '–ù–µ—Ç name')}, "
                               f"–û–ø—Ü–∏–π: {len(options)})")

                if option_texts:
                    self.logger.info(f"   –û–ø—Ü–∏–∏: {', '.join(option_texts[:5])}{'...' if len(option_texts) > 5 else ''}")

            # 5. –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            submit_buttons = self.driver.find_elements(By.XPATH,
                "//input[@type='submit'] | //button[@type='submit'] | //button[contains(text(), '–ü—Ä–æ—Å–º–æ—Ç—Ä')] | //button[contains(text(), '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å')]")
            self.logger.info(f"üîò –ö–Ω–æ–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(submit_buttons)}")

            for i, button in enumerate(submit_buttons[:3]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–Ω–æ–ø–∫–∏
                button_info = self.get_element_info(button)
                self.logger.info(f"üîò –ö–Ω–æ–ø–∫–∞ {i+1}: {button_info.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')} "
                               f"(ID: {button_info.get('id', '–ù–µ—Ç ID')}, "
                               f"Type: {button_info.get('type', '–ù–µ—Ç type')})")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º
            self._save_form_analysis_results({
                'input_fields': len(input_fields),
                'select_fields': len(select_fields),
                'submit_buttons': len(submit_buttons)
            })

            self.logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º: {e}")

    def analyze_report_form_elements(self):
        """
        –î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:
        - –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ (–≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫)
        - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–ø–æ–ª–µ –≤–≤–æ–¥–∞)
        - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ–ª–µ –≤–≤–æ–¥–∞)
        - –ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è (–≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫)
        """
        try:
            self.logger.info("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞...")

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            found_elements = {
                'period_dropdown': None,
                'start_date_field': None,
                'end_date_field': None,
                'reason_dropdown': None,
                'submit_button': None
            }

            # 1. –ò—â–µ–º –ø–æ–ª–µ "–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞" (–≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫)
            self.logger.info("üîç –ò—â–µ–º –ø–æ–ª–µ '–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞'...")
            period_selectors = [
                "//select[contains(@id, 'period') or contains(@id, 'Period')]",
                "//select[contains(@name, 'period') or contains(@name, 'Period')]",
                "//select[preceding-sibling::*[contains(text(), '–ü–µ—Ä–∏–æ–¥') or contains(text(), 'Period')]]",
                "//select[following-sibling::*[contains(text(), '–ü–µ—Ä–∏–æ–¥') or contains(text(), 'Period')]]",
                "//select[ancestor::*[contains(text(), '–ü–µ—Ä–∏–æ–¥') or contains(text(), 'Period')]]",
                "//select[descendant::*[contains(text(), '–ü–µ—Ä–∏–æ–¥') or contains(text(), 'Period')]]"
            ]

            for selector in period_selectors:
                elements = self.driver.find_elements(By.XPATH, selector)
                if elements:
                    found_elements['period_dropdown'] = elements[0]
                    self.logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    break

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Ä—è–¥–æ–º
            if not found_elements['period_dropdown']:
                period_labels = self.driver.find_elements(By.XPATH,
                    "//*[contains(text(), '–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞') or contains(text(), '–ü–µ—Ä–∏–æ–¥') or contains(text(), 'Period')]")
                for label in period_labels:
                    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π select —ç–ª–µ–º–µ–Ω—Ç
                    nearby_select = label.find_element(By.XPATH,
                        "following-sibling::select | preceding-sibling::select | ancestor::select | descendant::select")
                    if nearby_select:
                        found_elements['period_dropdown'] = nearby_select
                        self.logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ç–µ–∫—Å—Ç—É")
                        break

            # 2. –ò—â–µ–º –ø–æ–ª–µ "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"
            self.logger.info("üîç –ò—â–µ–º –ø–æ–ª–µ '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'...")
            start_date_selectors = [
                "//input[@type='date' or @type='text'][contains(@id, 'start') or contains(@id, 'Start') or contains(@id, 'begin') or contains(@id, 'from')]",
                "//input[@type='date' or @type='text'][contains(@name, 'start') or contains(@name, 'Start') or contains(@name, 'begin') or contains(@name, 'from')]",
                "//input[@type='date' or @type='text'][preceding-sibling::*[contains(text(), '–ù–∞—á–∞–ª–æ') or contains(text(), '–°') or contains(text(), 'Start') or contains(text(), 'From')]]",
                "//input[@type='date' or @type='text'][following-sibling::*[contains(text(), '–ù–∞—á–∞–ª–æ') or contains(text(), '–°') or contains(text(), 'Start') or contains(text(), 'From')]]"
            ]

            for selector in start_date_selectors:
                elements = self.driver.find_elements(By.XPATH, selector)
                if elements:
                    found_elements['start_date_field'] = elements[0]
                    self.logger.info(f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    break

            # 3. –ò—â–µ–º –ø–æ–ª–µ "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"
            self.logger.info("üîç –ò—â–µ–º –ø–æ–ª–µ '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è'...")
            end_date_selectors = [
                "//input[@type='date' or @type='text'][contains(@id, 'end') or contains(@id, 'End') or contains(@id, 'finish') or contains(@id, 'to')]",
                "//input[@type='date' or @type='text'][contains(@name, 'end') or contains(@name, 'End') or contains(@name, 'finish') or contains(@name, 'to')]",
                "//input[@type='date' or @type='text'][preceding-sibling::*[contains(text(), '–û–∫–æ–Ω—á–∞–Ω–∏–µ') or contains(text(), '–ü–æ') or contains(text(), 'End') or contains(text(), 'To')]]",
                "//input[@type='date' or @type='text'][following-sibling::*[contains(text(), '–û–∫–æ–Ω—á–∞–Ω–∏–µ') or contains(text(), '–ü–æ') or contains(text(), 'End') or contains(text(), 'To')]]"
            ]

            for selector in end_date_selectors:
                elements = self.driver.find_elements(By.XPATH, selector)
                if elements:
                    found_elements['end_date_field'] = elements[0]
                    self.logger.info(f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    break

            # 4. –ò—â–µ–º –ø–æ–ª–µ "–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"
            self.logger.info("üîç –ò—â–µ–º –ø–æ–ª–µ '–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è'...")
            reason_selectors = [
                "//select[contains(@id, 'reason') or contains(@id, 'Reason') or contains(@id, 'issue') or contains(@id, 'cause')]",
                "//select[contains(@name, 'reason') or contains(@name, 'Reason') or contains(@name, 'issue') or contains(@name, 'cause')]",
                "//select[preceding-sibling::*[contains(text(), '–ü—Ä–∏—á–∏–Ω–∞') or contains(text(), '–û–±—Ä–∞—â–µ–Ω–∏–µ') or contains(text(), 'Reason') or contains(text(), 'Issue')]]",
                "//select[following-sibling::*[contains(text(), '–ü—Ä–∏—á–∏–Ω–∞') or contains(text(), '–û–±—Ä–∞—â–µ–Ω–∏–µ') or contains(text(), 'Reason') or contains(text(), 'Issue')]]"
            ]

            for selector in reason_selectors:
                elements = self.driver.find_elements(By.XPATH, selector)
                if elements:
                    found_elements['reason_dropdown'] = elements[0]
                    self.logger.info(f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    break

            # 5. –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.logger.info("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏...")
            submit_selectors = [
                "//input[@type='submit']",
                "//button[@type='submit']",
                "//button[contains(text(), '–ü—Ä–æ—Å–º–æ—Ç—Ä')]",
                "//button[contains(text(), '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å')]",
                "//button[contains(text(), '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')]",
                "//button[contains(text(), 'Submit')]",
                "//button[contains(text(), 'Generate')]",
                "//input[contains(@value, '–ü—Ä–æ—Å–º–æ—Ç—Ä')]",
                "//input[contains(@value, '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å')]",
                "//input[contains(@value, 'Submit')]"
            ]

            for selector in submit_selectors:
                elements = self.driver.find_elements(By.XPATH, selector)
                if elements:
                    found_elements['submit_button'] = elements[0]
                    self.logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    break

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            self._analyze_found_elements(found_elements)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            self._save_detailed_form_analysis(found_elements)

            self.logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
            return found_elements

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã: {e}")
            return {}

    def _analyze_found_elements(self, found_elements):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã."""
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")

            for element_name, element in found_elements.items():
                if element:
                    element_info = self.get_element_info(element)
                    self.logger.info(f"‚úÖ {element_name}: {element_info.get('tag_name', 'N/A')} "
                                   f"(ID: {element_info.get('id', '–ù–µ—Ç ID')}, "
                                   f"Name: {element_info.get('name', '–ù–µ—Ç name')}, "
                                   f"Type: {element_info.get('type', '–ù–µ—Ç type')})")

                    # –ï—Å–ª–∏ —ç—Ç–æ select, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏
                    if element.tag_name == 'select':
                        options = element.find_elements(By.TAG_NAME, "option")
                        option_texts = [opt.text.strip() for opt in options if opt.text.strip()]
                        if option_texts:
                            self.logger.info(f"   üìã –û–ø—Ü–∏–∏: {', '.join(option_texts[:10])}{'...' if len(option_texts) > 10 else ''}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è {element_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")

    def _save_detailed_form_analysis(self, found_elements):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –≤ —Ñ–∞–π–ª."""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"detailed_form_analysis_{timestamp}.txt"
            filepath = os.path.join(self.analysis_dir, filename)

            with open(filepath, 'w', encoding='utf-8') as f:
                f.write("=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –≠–õ–ï–ú–ï–ù–¢–û–í –§–û–†–ú–´ –û–¢–ß–ï–¢–ê ===\n")
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"URL: {self.driver.current_url}\n\n")

                for element_name, element in found_elements.items():
                    f.write(f"=== {element_name.upper()} ===\n")
                    if element:
                        element_info = self.get_element_info(element)
                        f.write(f"Tag: {element_info.get('tag_name', 'N/A')}\n")
                        f.write(f"ID: {element_info.get('id', '–ù–µ—Ç ID')}\n")
                        f.write(f"Name: {element_info.get('name', '–ù–µ—Ç name')}\n")
                        f.write(f"Type: {element_info.get('type', '–ù–µ—Ç type')}\n")
                        f.write(f"Class: {element_info.get('class', '–ù–µ—Ç class')}\n")
                        f.write(f"Value: {element_info.get('value', '–ù–µ—Ç value')}\n")

                        # –ï—Å–ª–∏ —ç—Ç–æ select, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏
                        if element.tag_name == 'select':
                            options = element.find_elements(By.TAG_NAME, "option")
                            f.write(f"–û–ø—Ü–∏–π: {len(options)}\n")
                            for i, opt in enumerate(options[:20]):  # –ü–µ—Ä–≤—ã–µ 20 –æ–ø—Ü–∏–π
                                f.write(f"  {i+1}. {opt.text.strip()}\n")
                    else:
                        f.write("–ù–ï –ù–ê–ô–î–ï–ù\n")
                    f.write("\n")

            self.logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filepath}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def _save_form_analysis_results(self, results):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º –≤ —Ñ–∞–π–ª."""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"form_analysis_{timestamp}.txt"
            filepath = os.path.join(self.analysis_dir, filename)

            with open(filepath, 'w', encoding='utf-8') as f:
                f.write("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –§–û–†–ú ===\n")
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"URL: {self.driver.current_url}\n\n")

                for key, value in results.items():
                    f.write(f"{key}: {value}\n")

            self.logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filepath}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º: {e}")

    def find_form_field_by_label(self, label_text):
        """
        –ò—â–µ—Ç –ø–æ–ª–µ —Ñ–æ—Ä–º—ã –ø–æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –º–µ—Ç–∫–µ.

        Args:
            label_text: –¢–µ–∫—Å—Ç –º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            WebElement: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –∏–ª–∏ None
        """
        try:
            # –ò—â–µ–º –º–µ—Ç–∫—É
            label = self.driver.find_element(By.XPATH, f"//label[contains(text(), '{label_text}')]")

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
            field_id = label.get_attribute('for')
            if field_id:
                field = self.driver.find_element(By.ID, field_id)
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ –º–µ—Ç–∫–µ '{label_text}' —Å ID: {field_id}")
                return field

            # –ï—Å–ª–∏ –Ω–µ—Ç for –∞—Ç—Ä–∏–±—É—Ç–∞, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
            field = label.find_element(By.XPATH, "following-sibling::*[1]")
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ –º–µ—Ç–∫–µ '{label_text}' (—Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç)")
            return field

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—è –ø–æ –º–µ—Ç–∫–µ '{label_text}': {e}")
            return None

    def get_page_html_structure(self, filename=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"page_structure_analysis_{timestamp}.html"

            filepath = os.path.join(self.analysis_dir, filename)

            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            html_content = self.driver.page_source

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(html_content)

            self.logger.info(f"‚úÖ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {filepath}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            self.analyze_html_elements()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º
            self.analyze_form_elements()

            return filepath

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return None

    def analyze_html_elements(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç—ã...")

            # 1. –ò—â–µ–º ReportViewer —ç–ª–µ–º–µ–Ω—Ç—ã
            report_elements = self.driver.find_elements(By.CLASS_NAME, "ReportViewer")
            self.logger.info(f"üìä ReportViewer —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(report_elements)}")

            # 2. –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
            data_tables = self.driver.find_elements(By.TAG_NAME, "table")
            self.logger.info(f"üìã –¢–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data_tables)}")

            # 3. –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_elements = self.driver.find_elements(By.XPATH,
                "//*[contains(@class, 'pagination') or contains(@id, 'pagination')]")
            self.logger.info(f"üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {len(pagination_elements)}")

            # 4. –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_elements = self.driver.find_elements(By.XPATH,
                "//*[contains(text(), 'Excel') or contains(text(), 'Export') or contains(text(), '–í—ã–≥—Ä—É–∑–∫–∞')]")
            self.logger.info(f"üì§ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞: {len(export_elements)}")

            # 5. –ò—â–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
            hidden_fields = self.driver.find_elements(By.XPATH, "//input[@type='hidden']")
            self.logger.info(f"üîí –°–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π: {len(hidden_fields)}")

            # 6. –ò—â–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            submit_buttons = self.driver.find_elements(By.XPATH, "//input[@type='submit']")
            self.logger.info(f"üîò –ö–Ω–æ–ø–æ–∫: {len(buttons) + len(submit_buttons)}")

            # 7. –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            input_fields = self.driver.find_elements(By.TAG_NAME, "input")
            select_fields = self.driver.find_elements(By.TAG_NAME, "select")
            self.logger.info(f"‚úèÔ∏è –ü–æ–ª–µ–π –≤–≤–æ–¥–∞: {len(input_fields) + len(select_fields)}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            self._save_analysis_results({
                'report_elements': len(report_elements),
                'data_tables': len(data_tables),
                'pagination_elements': len(pagination_elements),
                'export_elements': len(export_elements),
                'hidden_fields': len(hidden_fields),
                'buttons': len(buttons) + len(submit_buttons),
                'input_fields': len(input_fields) + len(select_fields)
            })

            self.logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")

    def _save_analysis_results(self, results):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª."""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"page_analysis_{timestamp}.txt"
            filepath = os.path.join(self.analysis_dir, filename)

            with open(filepath, 'w', encoding='utf-8') as f:
                f.write("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –°–¢–†–ê–ù–ò–¶–´ ===\n")
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"URL: {self.driver.current_url}\n\n")

                for key, value in results.items():
                    f.write(f"{key}: {value}\n")

            self.logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filepath}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def find_element_by_text(self, text, tag_name=None):
        """
        –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É.

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            tag_name: –¢–∏–ø —Ç–µ–≥–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)

        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        try:
            if tag_name:
                xpath = f"//{tag_name}[contains(text(), '{text}')]"
            else:
                xpath = f"//*[contains(text(), '{text}')]"

            elements = self.driver.find_elements(By.XPATH, xpath)
            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º '{text}': {len(elements)}")

            return elements

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
            return []

    def find_element_by_class(self, class_name):
        """
        –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Å—É.

        Args:
            class_name: –ò–º—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        try:
            elements = self.driver.find_elements(By.CLASS_NAME, class_name)
            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º '{class_name}': {len(elements)}")

            return elements

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫–ª–∞—Å—Å—É: {e}")
            return []

    def get_element_info(self, element):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ.

        Args:
            element: WebElement –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
        """
        try:
            info = {
                'tag_name': element.tag_name,
                'text': element.text.strip() if element.text else '',
                'class': element.get_attribute('class'),
                'id': element.get_attribute('id'),
                'name': element.get_attribute('name'),
                'type': element.get_attribute('type'),
                'value': element.get_attribute('value'),
                'style': element.get_attribute('style'),
                'onclick': element.get_attribute('onclick')
            }

            return info

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ: {e}")
            return {}

    def wait_for_element(self, by, value, timeout=10):
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

        Args:
            by: –°–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ (By.ID, By.CLASS_NAME, etc.)
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            WebElement: –ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ None
        """
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, value))
            )
            self.logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {by} = {value}")
            return element

        except Exception as e:
            self.logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {by} = {value}, –æ—à–∏–±–∫–∞: {e}")
            return None
