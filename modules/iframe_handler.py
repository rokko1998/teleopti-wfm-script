"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å iframe –≤ –æ—Ç—á–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ
"""

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from loguru import logger
import time


class IframeHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å iframe"""

    def __init__(self, driver, logger):
        self.driver = driver
        self.logger = logger

    def switch_to_iframe(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ iframe"""
        try:
            iframe = self.driver.find_element(By.TAG_NAME, "iframe")
            self.driver.switch_to.frame(iframe)
            self.logger.info("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ iframe")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ iframe: {e}")
            return False

    def switch_to_main_document(self):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            self.driver.switch_to.default_content()
            self.logger.info("‚úÖ –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç: {e}")
            return False

    def find_element_in_iframe(self, selector, timeout=10):
        """–ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ iframe –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É (CSS –∏–ª–∏ XPath)"""
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ—Ä—Ç–µ–∂ (—Ç–∏–ø, —Å–µ–ª–µ–∫—Ç–æ—Ä)
            if isinstance(selector, tuple) and len(selector) == 2:
                selector_type, selector_value = selector
                if selector_type.lower() == "xpath":
                    by = By.XPATH
                elif selector_type.lower() == "css":
                    by = By.CSS_SELECTOR
                else:
                    self.logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {selector_type}")
                    return None
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                by = By.CSS_SELECTOR
                selector_value = selector
            
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, selector_value))
            )
            return element
        except Exception as e:
            self.logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ iframe: {selector}, –æ—à–∏–±–∫–∞: {e}")
            return None

    def find_element_with_diagnostics(self, selector, timeout=10):
        """–ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ iframe —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, selector))
            )

            # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
            self.logger.info(f"üîç –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector}")
            self.logger.info(f"   –¢–µ–≥: {element.tag_name}")
            self.logger.info(f"   ID: {element.get_attribute('id')}")
            self.logger.info(f"   –ö–ª–∞—Å—Å—ã: {element.get_attribute('class')}")
            self.logger.info(f"   –¢–∏–ø: {element.get_attribute('type')}")
            self.logger.info(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {element.get_attribute('value')}")

            return element

        except Exception as e:
            self.logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ iframe: {selector}, –æ—à–∏–±–∫–∞: {e}")
            return None

    def wait_for_element_clickable(self, selector, timeout=10):
        """–î–æ–∂–¥–∞—Ç—å—Å—è, –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–Ω–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
            )
            return element
        except Exception as e:
            self.logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ —Å—Ç–∞–ª –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º: {selector}, –æ—à–∏–±–∫–∞: {e}")
            return None

    def wait_for_fields_unlock(self, wait_time=5):
        """–ü–æ–¥–æ–∂–¥–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
        self.logger.info(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π...")
        time.sleep(wait_time)
        self.logger.info("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
