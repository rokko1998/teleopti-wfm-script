"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å iframe –≤ –æ—Ç—á–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ
"""

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import logging
import time


class IframeHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å iframe"""

    def __init__(self, driver, logger):
        self.driver = driver
        self.logger = logger

    def switch_to_iframe(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ iframe —Å –æ—Ç—á–µ—Ç–æ–º"""
        try:
            self.logger.info("[iframe_handler] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ iframe...")

            # –ò—â–µ–º iframe –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            iframe_selectors = [
                "iframe.viewer",
                "iframe[id*='ReportViewer']",
                "iframe[src*='report']",
                "iframe"
            ]

            iframe = None
            for selector in iframe_selectors:
                try:
                    iframe = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if iframe.is_displayed():
                        break
                except:
                    continue

            if not iframe:
                self.logger.error("[iframe_handler] ‚ùå Iframe –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ iframe
            self.driver.switch_to.frame(iframe)
            self.logger.info("[iframe_handler] ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ iframe")
            return True

        except Exception as e:
            self.logger.error(f"[iframe_handler] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ iframe: {e}")
            return False

    def switch_to_main_document(self):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            self.driver.switch_to.default_content()
            self.logger.info("[iframe_handler] ‚úÖ –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç")
            return True
        except Exception as e:
            self.logger.error(f"[iframe_handler] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç: {e}")
            return False

    def find_element_in_iframe(self, selector):
        """–ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ iframe –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É"""
        try:
            element = self.driver.find_element(By.CSS_SELECTOR, selector)
            return element
        except Exception as e:
            self.logger.error(f"[iframe_handler] ‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ iframe: {selector} - {e}")
            return None

    def find_element_with_diagnostics(self, selector, timeout=10):
        """–ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ iframe —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, selector))
            )

            # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
            self.logger.info(f"üîç –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector}")
            self.logger.info(f"   –¢–µ–≥: {element.tag_name}")
            self.logger.info(f"   ID: {element.get_attribute('id')}")
            self.logger.info(f"   –ö–ª–∞—Å—Å—ã: {element.get_attribute('class')}")
            self.logger.info(f"   –¢–∏–ø: {element.get_attribute('type')}")
            self.logger.info(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {element.get_attribute('value')}")

            return element

        except Exception as e:
            self.logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ iframe: {selector}, –æ—à–∏–±–∫–∞: {e}")
            return None

    def wait_for_element_clickable(self, selector, timeout=10):
        """–î–æ–∂–¥–∞—Ç—å—Å—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ iframe"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
            )
            return element
        except Exception as e:
            self.logger.error(f"[iframe_handler] ‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ —Å—Ç–∞–ª –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º: {selector} - {e}")
            return None

    def wait_for_fields_unlock(self, wait_time=5):
        """–ñ–¥–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π"""
        try:
            self.logger.info(f"[iframe_handler] ‚è≥ –ñ–¥–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π {wait_time} —Å–µ–∫—É–Ω–¥...")
            time.sleep(wait_time)
            self.logger.info("[iframe_handler] ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
        except Exception as e:
            self.logger.error(f"[iframe_handler] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π: {e}")
            return False
