"""
–ú–æ–¥—É–ª—å —Å "–±–æ–µ–≤—ã–º" —Å—Ü–µ–Ω–∞—Ä–∏–µ–º Selenium –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∏–∫–∏ –ø–æ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ API-–≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import re
import time
import json
import os
from pathlib import Path
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from loguru import logger


class SeleniumExportHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Selenium –∫–ª–∏–∫–∏"""

    def __init__(self, driver, logger_instance, download_dir=None):
        self.driver = driver
        self.logger = logger_instance
        self.download_dir = Path(download_dir) if download_dir else Path.home() / "Downloads"

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.download_dir.mkdir(parents=True, exist_ok=True)

    def _dispatch_click_js(self, driver, el):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–∫–∞ —á–µ—Ä–µ–∑ JavaScript"""
        driver.execute_script("""
          const el = arguments[0];
          const ev = (t) => el.dispatchEvent(new MouseEvent(t, {bubbles:true,cancelable:true,view:window}));
          ev('pointerdown'); ev('mousedown'); ev('mouseup'); ev('click');
        """, el)

    def switch_to_frame_with_reportviewer(self, timeout=20) -> bool:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ iframe —Å ReportViewer"""
        try:
            self.driver.switch_to.default_content()
            wait = WebDriverWait(self.driver, timeout)

            def has_rv() -> bool:
                try:
                    return bool(self.driver.execute_script("return !!(window.$find && $find('ReportViewerControl'));"))
                except Exception:
                    return False

            def dfs():
                # —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                if has_rv():
                    return True

                iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
                for idx in range(len(iframes)):
                    try:
                        self.driver.switch_to.frame(idx)
                        if dfs():
                            return True
                        self.driver.switch_to.parent_frame()
                    except Exception:
                        self.driver.switch_to.parent_frame()
                        continue
                return False

            result = dfs()
            if result:
                self.logger.info("‚úÖ –ù–∞–π–¥–µ–Ω iframe —Å ReportViewer")
            else:
                self.logger.warning("‚ö†Ô∏è Iframe —Å ReportViewer –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ iframe —Å ReportViewer: {e}")
            return False

    def open_menu_and_click_excel(self, driver, wait=WebDriverWait, timeout=15) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é Export –∏ –∫–ª–∏–∫ –ø–æ Excel –∏–º–µ–Ω–Ω–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        try:
            w = wait(driver, timeout)

            # –Ω–∞–π–¥—ë–º —Å–∞–º –≤—ã–ø–∞–¥–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–µ–Ω—é –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É id
            menu = driver.find_element(By.CSS_SELECTOR, "#ReportViewerControl_ctl05_ctl04_ctl00_Menu")
            # id —Ç–æ–≥–≥–ª–µ—Ä–∞ = id –º–µ–Ω—é –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ _Menu
            toggle_id = menu.get_attribute("id").replace("_Menu", "")

            # —Å–∞–º ¬´Export¬ª ‚Äî —ç—Ç–æ –ª–∏–±–æ —É–∑–µ–ª —Å —Ç–∞–∫–∏–º id, –ª–∏–±–æ –µ–≥–æ –ø–æ—Ç–æ–º–æ–∫ —Å title/aria-label
            toggle = None
            try:
                toggle = driver.find_element(By.ID, toggle_id)
            except Exception:
                pass

            if not toggle:
                toggle = driver.find_element(
                    By.CSS_SELECTOR,
                    f"#{toggle_id} *[title*='Export'], #{toggle_id} *[aria-label*='Export'], "
                    "#ReportViewerControl *[title*='Export'], #ReportViewerControl *[aria-label*='Export']"
                )

            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Export: {toggle_id}")

            # –æ—Ç–∫—Ä–æ–µ–º –º–µ–Ω—é: —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫, –∑–∞—Ç–µ–º –¥—É–±–ª–∏—Ä—É–µ–º JS-—Å–æ–±—ã—Ç–∏—è–º–∏
            try:
                ActionChains(driver).move_to_element(toggle).click().perform()
                self.logger.info("‚úÖ –ú–µ–Ω—é Export –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ ActionChains")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è ActionChains –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            self._dispatch_click_js(driver, toggle)
            self.logger.info("‚úÖ –ú–µ–Ω—é Export –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ JavaScript")

            # –∂–¥—ë–º, –ø–æ–∫–∞ –º–µ–Ω—é —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º—ã–º
            def _menu_visible(d):
                return d.execute_script("""
                    const el = arguments[0];
                    const s = getComputedStyle(el);
                    if (s.display === 'none' || s.visibility === 'hidden' || s.opacity === '0') return false;
                    const r = el.getBoundingClientRect();
                    return r.width > 0 && r.height > 0;
                """, menu)

            try:
                WebDriverWait(driver, 2).until(_menu_visible)
                self.logger.info("‚úÖ –ú–µ–Ω—é Export —Å—Ç–∞–ª–æ –≤–∏–¥–∏–º—ã–º")
            except Exception:
                # —Ñ–æ—Ä—Å-—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ: –∏–Ω–æ–≥–¥–∞ UI –∏–≥–Ω–æ—Ä–∏—Ç –∫–ª–∏–∫
                driver.execute_script("arguments[0].style.display='block';", menu)
                self.logger.info("‚úÖ –ú–µ–Ω—é Export –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ")

            # –Ω–∞–π–¥—ë–º –ø—É–Ω–∫—Ç Excel
            def _find_excel(d):
                nodes = d.find_elements(By.CSS_SELECTOR, "a.ActiveLink")
                for n in nodes:
                    txt = (n.text or n.get_attribute("textContent") or "").strip()
                    if "Excel" in txt:
                        return n
                return False

            excel = WebDriverWait(driver, 5).until(_find_excel)
            self.logger.info("‚úÖ –ü—É–Ω–∫—Ç Excel –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω—é")

            # –∫–ª–∏–∫–∞–µ–º –∏–º–µ–Ω–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ Excel
            try:
                ActionChains(driver).move_to_element(excel).click().perform()
                self.logger.info("‚úÖ Excel –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ ActionChains")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è ActionChains –∫–ª–∏–∫ –ø–æ Excel –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            self._dispatch_click_js(driver, excel)
            self.logger.info("‚úÖ Excel –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ JavaScript")

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∏ –∫–ª–∏–∫–µ –ø–æ Excel: {e}")
            return False

    def wait_for_download(self, download_dir: Path, pattern=r".*\.xlsx$", timeout=120):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∏ –∑–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑ ¬´–∞ —É—à—ë–ª –ª–∏ –∑–∞–ø—Ä–æ—Å?¬ª)"""
        try:
            import re
            regex = re.compile(pattern, re.IGNORECASE)
            end = time.time() + timeout
            before = {p.name for p in download_dir.glob("*")}

            self.logger.info(f"‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
            self.logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {download_dir}")

            while time.time() < end:
                files = list(download_dir.glob("*"))
                # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ
                new_files = [f for f in files if f.name not in before]

                # –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É Chrome –±—ã–≤–∞–µ—Ç .crdownload
                if any(f.suffix.lower() == ".crdownload" for f in new_files):
                    crdownload_files = [f for f in new_files if f.suffix.lower() == ".crdownload"]
                    if crdownload_files:
                        newest = max(crdownload_files, key=lambda p: p.stat().st_mtime)
                        size = newest.stat().st_size
                        self.logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {newest.name} ({size} –±–∞–π—Ç)")
                    time.sleep(0.3)
                    continue

                # –∏—â–µ–º –≥–æ—Ç–æ–≤—ã–π .xlsx
                ready = [f for f in new_files if regex.match(f.name)]
                if ready:
                    target = sorted(ready, key=lambda p: p.stat().st_mtime)[-1]
                    if target.stat().st_size > 0:
                        self.logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {target.name} ({target.stat().st_size} –±–∞–π—Ç)")
                        return target

                time.sleep(0.3)

            self.logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    def find_export_url_in_perf_logs(self, driver, timeout=5):
        """–ü–æ–∏—Å–∫ URL —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ performance –ª–æ–≥–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            end = time.time() + timeout
            rx = re.compile(r"Reserved\.ReportViewerWebControl\.axd.*Format=EXCELOPENXML", re.I)

            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º performance –ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞...")

            while time.time() < end:
                for entry in driver.get_log("performance"):
                    try:
                        msg = json.loads(entry["message"])["message"]
                        if msg.get("method") == "Network.requestWillBeSent":
                            url = msg["params"]["request"]["url"]
                            if rx.search(url):
                                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω URL —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –ª–æ–≥–∞—Ö: {url}")
                                return url
                    except Exception:
                        continue
                time.sleep(0.2)

            self.logger.warning("‚ö†Ô∏è URL —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ performance –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ performance –ª–æ–≥–æ–≤: {e}")
            return None

    def export_excel_by_click(self, report_url: str, download_dir: Path, overall_timeout=120) -> Path | None:
        """–í—Å—ë –≤–º–µ—Å—Ç–µ: —Å—Ü–µ–Ω–∞—Ä–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ ¬´–∫–ª–∏–∫–æ–º¬ª"""
        try:
            self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç Excel —á–µ—Ä–µ–∑ –∫–ª–∏–∫–∏ –ø–æ –º–µ–Ω—é...")

            # 1) –Ω–∞–π—Ç–∏ —Ñ—Ä–µ–π–º —Å ReportViewer
            if not self.switch_to_frame_with_reportviewer(timeout=30):
                raise RuntimeError("ReportViewer frame not found")

            # 2) –ø–æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ö–≤–æ—Å—Ç—ã
            self.logger.info("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∑–æ–∫...")
            for p in download_dir.glob("*"):
                if p.suffix.lower() in {".xlsx", ".crdownload"}:
                    try:
                        p.unlink()
                        self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {p.name}")
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {p.name}: {e}")

            # 3) –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∏ –∫–ª–∏–∫–Ω—É—Ç—å Excel
            self.logger.info("üñ±Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é Export –∏ –∫–ª–∏–∫–∞–µ–º Excel...")
            ok = self.open_menu_and_click_excel(self.driver)
            if not ok:
                raise RuntimeError("Failed to click Excel menu item")

            # 4) –¥–æ–∂–¥–∞—Ç—å—Å—è —Ñ–∞–π–ª–∞
            self.logger.info("‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ Excel...")
            target = self.wait_for_download(download_dir, r".*\.xlsx$", timeout=overall_timeout)
            if target:
                self.logger.info(f"üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {target}")
                return target

            # 5) –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, —É—à—ë–ª –ª–∏ –∑–∞–ø—Ä–æ—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.logger.warning("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º performance –ª–æ–≥–∏...")
            url = self.find_export_url_in_perf_logs(self.driver, timeout=10)
            if url:
                raise RuntimeError(f"Export request sent, but browser did not save file (URL seen: {url}). Check download policy.")
            else:
                raise RuntimeError("No export request observed. Likely wrong toggle/menu state or blocked click.")

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel: {e}")
            return None

    def cleanup_downloads(self, patterns=(".xlsx", ".crdownload")):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∑–æ–∫"""
        try:
            for pattern in patterns:
                files = list(self.download_dir.glob(f"*{pattern}"))
                for file_path in files:
                    try:
                        file_path.unlink()
                        self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path.name}")
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path.name}: {e}")

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")

    def set_download_directory(self, new_dir):
        """–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫"""
        try:
            new_path = Path(new_dir)
            new_path.mkdir(parents=True, exist_ok=True)
            self.download_dir = new_path
            self.logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_path}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")
            return False
