#!/usr/bin/env python3
"""
wfm_single.py ‚Äî –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ ¬´–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö¬ª –∏ ¬´–ø—Ä–µ–≤—ã—à–µ–Ω–∏—è¬ª –∏–∑ Teleopti.

–ê–ö–¢–£–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê:

1. –ù–û–í–´–ô –†–ï–ñ–ò–ú (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏:
   python main.py –≤–∞—à_—Ñ–∞–π–ª.xlsx --auto-date-processing
    python main.py test08.xlsx --auto-date-processing

2. –ù–û–í–´–ô –†–ï–ñ–ò–ú —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏:
   python main.py –≤–∞—à_—Ñ–∞–π–ª.xlsx --auto-date-processing --with-skills --no-headless

3. –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–ï–ñ–ò–ú - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º:
   python main.py –≤–∞—à_—Ñ–∞–π–ª.xlsx --out-csv result.csv --no-headless

4. –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–ï–ñ–ò–ú —Å –Ω–∞–≤—ã–∫–∞–º–∏:
   python main.py –≤–∞—à_—Ñ–∞–π–ª.xlsx --with-skills --no-headless

–û–ü–ò–°–ê–ù–ò–ï –ù–û–í–û–ì–û –†–ï–ñ–ò–ú–ê:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å —ç—Ç–æ–π –¥–∞—Ç–æ–π
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–æ–ª–æ–Ω–∫–∏ "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" –∏ "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ"
- –°–æ–∑–¥–∞–µ—Ç —ç—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

–ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
- modules/selenium_helpers.py - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- modules/date_time_utils.py - –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
- modules/regions.py - –†–∞–±–æ—Ç–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ (—Ä–∞–±–æ—á–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)
- modules/skills.py - –†–∞–±–æ—Ç–∞ —Å –Ω–∞–≤—ã–∫–∞–º–∏
- modules/data_processing.py - –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
- modules/download_manager.py - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
- modules/excel_manager.py - –†–∞–±–æ—Ç–∞ —Å Excel —Ñ–∞–π–ª–∞–º–∏
"""

from __future__ import annotations

import sys
import argparse
import yaml
from pathlib import Path
from loguru import logger

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from modules.selenium_helpers import get_driver, setup_proxy, apply_cdp_download_settings
from modules.data_processing import (
    process_excel_data,
    validate_region_in_config,
    calc_metrics,
    create_result_record,
    save_results_to_csv
)
from modules.date_time_utils import windows_for_row, prepare_datetime_for_report
from modules.skills import setup_skills, prepare_skills_from_config, show_page_diagnostics
from modules.download_manager import download_report
from modules.excel_manager import (
    get_date_from_first_row,
    filter_problems_by_date,
    calculate_time_window_for_date,
    save_single_result_to_original_file
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_DIR = Path(__file__).resolve().parent


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="WFM script for extracting lost calls and excess traffic from Teleopti")
    parser.add_argument("input_xlsx", help="–§–∞–π–ª Power Query (–°–≤–æ–¥.xlsx)")
    parser.add_argument("--yaml-cfg", help="region_skills.yml", default=None)
    parser.add_argument("--out-csv", help="–§–∞–π–ª –≤—ã–≤–æ–¥–∞", default="wfm_metrics_daily.csv")
    parser.add_argument("--headless", help="–ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ", action="store_true", default=True)
    parser.add_argument("--no-headless", help="–ó–∞–ø—É—Å–∫ —Å –≤–∏–¥–∏–º—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º", action="store_true")
    parser.add_argument("--with-skills", help="–í–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∞–≤—ã–∫–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏)", action="store_true")
    parser.add_argument("--auto-date-processing", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å —ç—Ç–æ–π –¥–∞—Ç–æ–π", action="store_true")

    args = parser.parse_args()

    input_xlsx_path = Path(args.input_xlsx)
    yaml_path = Path(args.yaml_cfg) if args.yaml_cfg else BASE_DIR / "region_skills.yml"
    out_csv_path = Path(args.out_csv)
    headless = args.headless and not args.no_headless

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
    setup_proxy()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cfg = yaml.safe_load(yaml_path.read_text(encoding="utf-8"))

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ --with-skills
    skills_ids = None
    if args.with_skills:
        logger.info("üéØ –í–∫–ª—é—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –Ω–∞–≤—ã–∫–∞–º–∏ (—Ñ–ª–∞–≥ --with-skills)")
        skills_ids = prepare_skills_from_config(cfg)
    else:
        logger.info("‚ÑπÔ∏è –†–∞–±–æ—Ç–∞ —Å –Ω–∞–≤—ã–∫–∞–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --with-skills –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è)")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel –¥–∞–Ω–Ω—ã–µ
    df = process_excel_data(input_xlsx_path)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    use_auto_date_processing = args.auto_date_processing

    if use_auto_date_processing:
        logger.info("üÜï –í–∫–ª—é—á–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –¥–∞—Ç–µ")
        logger.info("üìÖ –î–∞—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã–π Excel —Ñ–∞–π–ª")
        logger.info("‚ö†Ô∏è –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª {input_xlsx_path.name} –∑–∞–∫—Ä—ã—Ç –≤ Excel –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
    else:
        logger.info("üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebDriver
    driver = get_driver(headless=headless)
    results = []

    try:
        # --- –ù–ê–í–´–ö–ò: –î–æ–±–∞–≤–ª—è–µ–º –û–î–ò–ù –†–ê–ó –í –ù–ê–ß–ê–õ–ï (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã) ----------------------------
        if skills_ids:
            logger.info(f"üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏ (–ë–ï–ó –û–ß–ò–°–¢–ö–ò): {skills_ids}")
            logger.info("üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤—ã–∫–æ–≤...")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
            from modules.selenium_helpers import REPORT_URL
            driver.get(REPORT_URL)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º CDP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            apply_cdp_download_settings(driver)

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ)
            logger.info("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            import time
            time.sleep(5)  # –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
            show_page_diagnostics(driver)

            logger.info("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –ø–æ–∏—Å–∫—É –Ω–∞–≤—ã–∫–æ–≤...")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏
            if not setup_skills(driver, skills_ids):
                logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏!")
                return

        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel...")

        if use_auto_date_processing:
            # –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            target_date = get_date_from_first_row(df)
            df_to_process = filter_problems_by_date(df, target_date)

            if len(df_to_process) == 0:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É")
                return

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df_to_process)} –ø—Ä–æ–±–ª–µ–º –¥–ª—è –¥–∞—Ç—ã {target_date.strftime('%d.%m.%Y')}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            from openpyxl import load_workbook
            try:
                workbook = load_workbook(input_xlsx_path)
                report_sheet = workbook["–û—Ç—á–µ—Ç"]
                logger.info("‚úÖ Excel —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π)")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Excel —Ñ–∞–π–ª: {e}")
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            total_rows = len(df_to_process)
            processed_rows = 0
            save_counter = 0
            batch_size = 10

            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_rows} —Å—Ç—Ä–æ–∫...")
            logger.info(f"üì¶ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {batch_size} –∑–∞–ø–∏—Å–µ–π")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ DataFrame
            for idx, row in df_to_process.iterrows():
                region = row["–†–µ–≥–∏–æ–Ω"]
                mass_number = row["–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π"]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed_rows += 1
                progress_percent = (processed_rows / total_rows) * 100
                logger.info(f"üîÑ [{processed_rows}/{total_rows}] ({progress_percent:.1f}%) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {mass_number} - {region}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–≥–∏–æ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if not validate_region_in_config(region, cfg):
                    logger.warning(f"‚ö†Ô∏è –†–µ–≥–∏–æ–Ω '{region}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç (–Ω–∞ NaT –∑–Ω–∞—á–µ–Ω–∏—è)
                import pandas as pd
                if pd.isna(row.get('–°—Ç–∞—Ä—Ç')):
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {mass_number}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ NaT –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω—É–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–∏ "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" –∏ "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ" –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                    try:
                        workbook, report_sheet, save_counter, skip_reason = save_single_result_to_original_file(
                            mass_number=mass_number,
                            lost_calls=0,
                            excess_traffic=0.0,
                            original_file_path=input_xlsx_path,
                            row_index=idx,
                            workbook=workbook,
                            report_sheet=report_sheet,
                            save_counter=save_counter
                        )

                        if skip_reason == "already_processed":
                            logger.info(f"‚è≠Ô∏è –°—Ç—Ä–æ–∫–∞ {mass_number} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        elif skip_reason == "success":
                            logger.info(f"‚úÖ –ù—É–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è {mass_number} (NaT –≤ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞)")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–∫–µ—Ç
                            if save_counter >= batch_size:
                                logger.info(f"üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç –∏–∑ {save_counter} –∑–∞–ø–∏—Å–µ–π...")
                                from modules.excel_manager import save_excel_batch
                                if save_excel_batch(workbook, report_sheet, input_xlsx_path):
                                    save_counter = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                                    logger.info(f"‚úÖ –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed_rows}/{total_rows} ({progress_percent:.1f}%)")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {skip_reason}")

                    except Exception as save_exc:
                        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –¥–ª—è {mass_number}: {save_exc}")
                        continue

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –Ω—É–ª—è–º–∏
                    result = create_result_record(
                        mass_number,
                        'NaT_start_date',  # —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π –Ω–∞—á–∞–ª–∞
                        0,  # lost_calls = 0
                        0.0  # excess_traffic = 0.0
                    )
                    results.append(result)
                    continue

                # –ï—Å–ª–∏ –û–∫–æ–Ω—á–∞–Ω–∏–µ = NaT, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                if pd.isna(row.get('–û–∫–æ–Ω—á–∞–Ω–∏–µ')):
                    logger.info(f"üìÖ –°—Ç—Ä–æ–∫–∞ {mass_number}: –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞ (–û–∫–æ–Ω—á–∞–Ω–∏–µ = NaT) - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–ó–∞–º–µ—Ç–∫–∏" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                from modules.excel_manager import check_notes_column
                should_skip_notes, notes_value, notes_reason = check_notes_column(workbook, report_sheet, idx + 2)  # +2 —Ç–∞–∫ –∫–∞–∫ Excel —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1, –∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–µ 1

                if should_skip_notes:
                    logger.info(f"üìù –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è {mass_number} (–∑–∞–º–µ—Ç–∫–∞ = {notes_value} < 50)")
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω—É–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–∏ "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" –∏ "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ"
                    try:
                        workbook, report_sheet, save_counter, skip_reason = save_single_result_to_original_file(
                            mass_number=mass_number,
                            lost_calls=0,
                            excess_traffic=0.0,
                            original_file_path=input_xlsx_path,
                            row_index=idx,
                            workbook=workbook,
                            report_sheet=report_sheet,
                            save_counter=save_counter
                        )

                        if skip_reason == "already_processed":
                            logger.info(f"‚è≠Ô∏è –°—Ç—Ä–æ–∫–∞ {mass_number} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        elif skip_reason == "success":
                            logger.info(f"‚úÖ –ù—É–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è {mass_number} (–∑–∞–º–µ—Ç–∫–∞ < 50)")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–∫–µ—Ç
                            if save_counter >= batch_size:
                                logger.info(f"üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç –∏–∑ {save_counter} –∑–∞–ø–∏—Å–µ–π...")
                                from modules.excel_manager import save_excel_batch
                                if save_excel_batch(workbook, report_sheet, input_xlsx_path):
                                    save_counter = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                                    logger.info(f"‚úÖ –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed_rows}/{total_rows} ({progress_percent:.1f}%)")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {skip_reason}")

                    except Exception as save_exc:
                        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –¥–ª—è {mass_number}: {save_exc}")
                        continue

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –Ω—É–ª—è–º–∏
                    result = create_result_record(
                        mass_number,
                        row.get('–°—Ç–∞—Ä—Ç', 'unknown').strftime('%Y-%m-%d') if hasattr(row.get('–°—Ç–∞—Ä—Ç', ''), 'strftime') else 'unknown',
                        0,  # lost_calls = 0
                        0.0  # excess_traffic = 0.0
                    )
                    results.append(result)
                    continue

                workload_params = cfg["regions"][region]

                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–Ω–µ–≤–Ω—ã–µ –æ–∫–Ω–∞
                time_windows = list(windows_for_row(row))
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: {len(time_windows)}")

                for window_idx, (win_start, win_end) in enumerate(time_windows):
                    logger.info(f"üî∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∫–Ω–æ #{window_idx + 1}/{len(time_windows)}")
                    
                    # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
                    logger.info(f"üîç –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ #{window_idx + 1}: {win_start} - {win_end}")
                    logger.info(f"üîç –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: win_start={type(win_start)}, win_end={type(win_end)}")

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                    win_start = prepare_datetime_for_report(win_start)
                    win_end = prepare_datetime_for_report(win_end)
                    
                    # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
                    logger.info(f"üîç –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã: {win_start} - {win_end}")

                    try:
                        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º download_report –¥–ª—è {mass_number} {win_start.date()}")
                        logger.info(f"üîç –ü–µ—Ä–µ–¥–∞–µ–º –≤ download_report: start={win_start}, end={win_end}")
                        xlsx_path = download_report(driver, workload_params, win_start, win_end)
                        logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {xlsx_path}")
                        lost, excess = calc_metrics(xlsx_path)
                        
                        # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
                        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞: lost={lost}, excess={excess}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π Excel —Ñ–∞–π–ª
                        try:
                            workbook, report_sheet, save_counter, skip_reason = save_single_result_to_original_file(
                                mass_number=mass_number,
                                lost_calls=lost,
                                excess_traffic=excess,
                                original_file_path=input_xlsx_path,
                                row_index=idx,
                                workbook=workbook,
                                report_sheet=report_sheet,
                                save_counter=save_counter
                            )

                            if skip_reason == "already_processed":
                                logger.info(f"‚è≠Ô∏è –°—Ç—Ä–æ–∫–∞ {mass_number} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –æ–∫–æ–Ω –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
                            elif skip_reason == "success":
                                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª: {mass_number} ‚Üí lost={lost}, excess={excess}")

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–∫–µ—Ç
                                if save_counter >= batch_size:
                                    logger.info(f"üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç –∏–∑ {save_counter} –∑–∞–ø–∏—Å–µ–π...")
                                    from modules.excel_manager import save_excel_batch
                                    if save_excel_batch(workbook, report_sheet, input_xlsx_path):
                                        save_counter = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                                        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed_rows}/{total_rows} ({progress_percent:.1f}%)")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {skip_reason}")

                        except Exception as save_exc:
                            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –¥–ª—è {mass_number}: {save_exc}")
                            logger.error(f"   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª")
                            continue

                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV
                        result = create_result_record(
                            mass_number,
                            win_start.date().isoformat(),
                            lost,
                            excess
                        )
                        results.append(result)

                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω {mass_number} - {region}: lost={lost}, excess={excess}")
                    except Exception as exc:
                        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –¥–ª—è —Å—Ç—Ä–æ–∫–∏ #{idx} MassID {mass_number} {region}")
                        try:
                            logger.error(f"   –ü–µ—Ä–∏–æ–¥: {win_start.date()} - {win_end.date()}")
                        except:
                            logger.error(f"   –ü–µ—Ä–∏–æ–¥: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {exc}")
                        logger.exception("   –ü–æ–ª–Ω—ã–π traceback:")
                        continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if save_counter > 0:
                logger.info(f"üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –∏–∑ {save_counter} –∑–∞–ø–∏—Å–µ–π...")
                try:
                    from modules.excel_manager import save_excel_batch
                    if save_excel_batch(workbook, report_sheet, input_xlsx_path):
                        logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                except Exception as final_save_e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞: {final_save_e}")

            logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –ø—Ä–æ–±–ª–µ–º")
            logger.info(f"üíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_xlsx_path}")

        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
            logger.info("üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            total_rows = len(df)
            processed_rows = 0

            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_rows} —Å—Ç—Ä–æ–∫...")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            for idx, row in df.iterrows():
                region = row["–†–µ–≥–∏–æ–Ω"]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                processed_rows += 1
                progress_percent = (processed_rows / total_rows) * 100
                logger.info(f"üîÑ [{processed_rows}/{total_rows}] ({progress_percent:.1f}%) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']} - {region}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–≥–∏–æ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if not validate_region_in_config(region, cfg):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç (–Ω–∞ NaT –∑–Ω–∞—á–µ–Ω–∏—è)
                import pandas as pd
                if pd.isna(row.get('–°—Ç–∞—Ä—Ç')):
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ NaT –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –ï—Å–ª–∏ –û–∫–æ–Ω—á–∞–Ω–∏–µ = NaT, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                if pd.isna(row.get('–û–∫–æ–Ω—á–∞–Ω–∏–µ')):
                    logger.info(f"üìÖ –°—Ç—Ä–æ–∫–∞ {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']}: –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞ (–û–∫–æ–Ω—á–∞–Ω–∏–µ = NaT) - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é")

                workload_params = cfg["regions"][region]

                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–Ω–µ–≤–Ω—ã–µ –æ–∫–Ω–∞
                time_windows = list(windows_for_row(row))
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: {len(time_windows)}")

                for window_idx, (win_start, win_end) in enumerate(time_windows):
                    logger.info(f"üî∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∫–Ω–æ #{window_idx + 1}/{len(time_windows)}")

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                    win_start = prepare_datetime_for_report(win_start)
                    win_end = prepare_datetime_for_report(win_end)

                    try:
                        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º download_report –¥–ª—è {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']} {win_start.date()}")
                        xlsx_path = download_report(driver, workload_params, win_start, win_end)
                        logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {xlsx_path}")
                        lost, excess = calc_metrics(xlsx_path)

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            save_single_result_to_original_file(
                                mass_number=row["–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π"],
                                lost_calls=lost,
                                excess_traffic=excess,
                                original_file_path=input_xlsx_path,
                                row_index=idx
                            )
                            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']} ‚Üí lost={lost}, excess={excess}")
                        except PermissionError as pe:
                            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –î–û–°–¢–£–ü–ê: –§–∞–π–ª {input_xlsx_path} –æ—Ç–∫—Ä—ã—Ç –≤ Excel –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                            logger.error(f"   –ó–∞–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                            logger.error(f"   –î–µ—Ç–∞–ª–∏: {pe}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ results
                            continue
                        except Exception as save_exc:
                            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –¥–ª—è {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']}: {save_exc}")
                            logger.error(f"   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ results
                            continue

                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV
                        result = create_result_record(
                            row["–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π"],
                            win_start.date().isoformat(),
                            lost,
                            excess
                        )
                        results.append(result)

                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']} - {region}: lost={lost}, excess={excess}")
                    except Exception as exc:
                        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –¥–ª—è —Å—Ç—Ä–æ–∫–∏ #{idx} MassID {row['–ù–æ–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π']} {region}")
                        try:
                            logger.error(f"   –ü–µ—Ä–∏–æ–¥: {win_start.date()} - {win_end.date()}")
                        except:
                            logger.error(f"   –ü–µ—Ä–∏–æ–¥: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {exc}")
                        logger.exception("   –ü–æ–ª–Ω—ã–π traceback:")
                        continue

            logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –ø—Ä–æ–±–ª–µ–º")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV —Ñ–∞–π–ª (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º)
            save_results_to_csv(results, out_csv_path)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        driver.quit()


if __name__ == "__main__":
    main()