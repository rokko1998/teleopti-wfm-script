// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12 -> Console) –∏ –Ω–∞–∂–º–∏—Ç–µ Enter

console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–∞...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
function getElementInfo(element) {
    if (!element) return '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';

    return {
        tagName: element.tagName,
        id: element.id || '–ù–µ—Ç ID',
        name: element.name || '–ù–µ—Ç name',
        type: element.type || '–ù–µ—Ç type',
        className: element.className || '–ù–µ—Ç class',
        value: element.value || '–ù–µ—Ç value',
        placeholder: element.placeholder || '–ù–µ—Ç placeholder',
        textContent: element.textContent ? element.textContent.trim().substring(0, 100) : '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞',
        isVisible: element.offsetWidth > 0 && element.offsetHeight > 0,
        isEnabled: !element.disabled,
        isReadOnly: element.readOnly || false
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
function findElementsByText(searchText, tagName = null) {
    const xpath = tagName
        ? `//${tagName}[contains(text(), '${searchText}') or contains(@placeholder, '${searchText}') or contains(@title, '${searchText}')]`
        : `//*[contains(text(), '${searchText}') or contains(@placeholder, '${searchText}') or contains(@title, '${searchText}')]`;

    const elements = document.evaluate(xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    const result = [];

    for (let i = 0; i < elements.snapshotLength; i++) {
        result.push(elements.snapshotItem(i));
    }

    return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
function findNearbyFormElements(labelElement, maxDistance = 3) {
    const formElements = [];

    // –ò—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    let current = labelElement.nextElementSibling;
    for (let i = 0; i < maxDistance && current; i++) {
        if (current.tagName === 'INPUT' || current.tagName === 'SELECT' || current.tagName === 'TEXTAREA') {
            formElements.push({ element: current, direction: 'next', distance: i + 1 });
        }
        current = current.nextElementSibling;
    }

    // –ò—â–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    current = labelElement.previousElementSibling;
    for (let i = 0; i < maxDistance && current; i++) {
        if (current.tagName === 'INPUT' || current.tagName === 'SELECT' || current.tagName === 'TEXTAREA') {
            formElements.push({ element: current, direction: 'previous', distance: i + 1 });
        }
        current = current.previousElementSibling;
    }

    // –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    let parent = labelElement.parentElement;
    for (let i = 0; i < maxDistance && parent; i++) {
        const inputs = parent.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            if (input !== labelElement) {
                formElements.push({ element: input, direction: 'parent', distance: i + 1 });
            }
        });
        parent = parent.parentElement;
    }

    return formElements;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
function analyzeReportPage() {
    console.log('\n=== –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´ –û–¢–ß–ï–¢–ê ===\n');

    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
    console.log('üìã –ê–ù–ê–õ–ò–ó –í–°–ï–• –≠–õ–ï–ú–ï–ù–¢–û–í –§–û–†–ú–´:');
    const allInputs = document.querySelectorAll('input, select, textarea');
    console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã: ${allInputs.length}`);

    allInputs.forEach((input, index) => {
        if (index < 20) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            const info = getElementInfo(input);
            console.log(`${index + 1}. ${input.tagName} - ID: ${info.id}, Name: ${info.name}, Type: ${info.type}`);
        }
    });

    if (allInputs.length > 20) {
        console.log(`... –∏ –µ—â–µ ${allInputs.length - 20} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }

    // 2. –ò—â–µ–º –ø–æ–ª–µ "–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞"
    console.log('\nüîç –ü–û–ò–°–ö –ü–û–õ–Ø "–ü–ï–†–ò–û–î –û–¢–ß–ï–¢–ê":');
    const periodLabels = findElementsByText('–ü–µ—Ä–∏–æ–¥');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–µ—Ä–∏–æ–¥": ${periodLabels.length}`);

    periodLabels.forEach((label, index) => {
        console.log(`${index + 1}. –ú–µ—Ç–∫–∞: "${label.textContent.trim()}"`);
        const nearbyElements = findNearbyFormElements(label);
        if (nearbyElements.length > 0) {
            console.log(`   –ë–ª–∏–∂–∞–π—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã:`);
            nearbyElements.forEach(nearby => {
                const info = getElementInfo(nearby.element);
                console.log(`   - ${nearby.element.tagName} (${nearby.direction}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${nearby.distance}): ID=${info.id}, Name=${info.name}`);
            });
        }
    });

    // 3. –ò—â–µ–º –ø–æ–ª—è –¥–∞—Ç
    console.log('\nüìÖ –ü–û–ò–°–ö –ü–û–õ–ï–ô –î–ê–¢:');
    const dateLabels = findElementsByText('–î–∞—Ç–∞');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º "–î–∞—Ç–∞": ${dateLabels.length}`);

    dateLabels.forEach((label, index) => {
        console.log(`${index + 1}. –ú–µ—Ç–∫–∞: "${label.textContent.trim()}"`);
        const nearbyElements = findNearbyFormElements(label);
        if (nearbyElements.length > 0) {
            console.log(`   –ë–ª–∏–∂–∞–π—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã:`);
            nearbyElements.forEach(nearby => {
                const info = getElementInfo(nearby.element);
                console.log(`   - ${nearby.element.tagName} (${nearby.direction}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${nearby.distance}): ID=${info.id}, Name=${info.name}, Type=${info.type}`);
            });
        }
    });

    // 4. –ò—â–µ–º –ø–æ–ª–µ "–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"
    console.log('\nüîç –ü–û–ò–°–ö –ü–û–õ–Ø "–ü–†–ò–ß–ò–ù–ê –û–ë–†–ê–©–ï–ù–ò–Ø":');
    const reasonLabels = findElementsByText('–ü—Ä–∏—á–∏–Ω–∞');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º "–ü—Ä–∏—á–∏–Ω–∞": ${reasonLabels.length}`);

    reasonLabels.forEach((label, index) => {
        console.log(`${index + 1}. –ú–µ—Ç–∫–∞: "${label.textContent.trim()}"`);
        const nearbyElements = findNearbyFormElements(label);
        if (nearbyElements.length > 0) {
            console.log(`   –ë–ª–∏–∂–∞–π—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã:`);
            nearbyElements.forEach(nearby => {
                const info = getElementInfo(nearby.element);
                console.log(`   - ${nearby.element.tagName} (${nearby.direction}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${nearby.distance}): ID=${info.id}, Name=${info.name}`);
            });
        }
    });

    // 5. –ò—â–µ–º –∫–Ω–æ–ø–∫–∏
    console.log('\nüîò –ü–û–ò–°–ö –ö–ù–û–ü–û–ö:');
    const buttons = document.querySelectorAll('button, input[type="submit"], input[type="button"]');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: ${buttons.length}`);

    buttons.forEach((button, index) => {
        if (index < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            const info = getElementInfo(button);
            console.log(`${index + 1}. ${button.tagName} - ID: ${info.id}, Name: ${info.name}, Value: ${info.value}, Text: ${info.textContent}`);
        }
    });

    // 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –°–¢–†–ê–ù–ò–¶–´:');
    const tables = document.querySelectorAll('table');
    const forms = document.querySelectorAll('form');
    const divs = document.querySelectorAll('div');

    console.log(`–¢–∞–±–ª–∏—Ü: ${tables.length}`);
    console.log(`–§–æ—Ä–º: ${forms.length}`);
    console.log(`Div –±–ª–æ–∫–æ–≤: ${divs.length}`);

    // 7. –ò—â–µ–º ReportViewer —ç–ª–µ–º–µ–Ω—Ç—ã
    console.log('\nüìä –ü–û–ò–°–ö REPORTVIEWER –≠–õ–ï–ú–ï–ù–¢–û–í:');
    const reportElements = document.querySelectorAll('[class*="ReportViewer"], [id*="ReportViewer"]');
    console.log(`ReportViewer —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${reportElements.length}`);

    reportElements.forEach((element, index) => {
        const info = getElementInfo(element);
        console.log(`${index + 1}. ${element.tagName} - ID: ${info.id}, Class: ${info.className}`);
    });

    // 8. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ select —ç–ª–µ–º–µ–Ω—Ç—ã
    console.log('\nüìã –ê–ù–ê–õ–ò–ó –í–´–ü–ê–î–ê–Æ–©–ò–• –°–ü–ò–°–ö–û–í:');
    const selects = document.querySelectorAll('select');
    console.log(`–í—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤: ${selects.length}`);

    selects.forEach((select, index) => {
        const info = getElementInfo(select);
        const options = select.querySelectorAll('option');
        console.log(`${index + 1}. Select - ID: ${info.id}, Name: ${info.name}, –û–ø—Ü–∏–π: ${options.length}`);

        if (options.length <= 10) {
            options.forEach((option, optIndex) => {
                console.log(`   ${optIndex + 1}. ${option.text} (value: ${option.value})`);
            });
        } else {
            console.log(`   –ü–µ—Ä–≤—ã–µ 5 –æ–ø—Ü–∏–π:`);
            for (let i = 0; i < 5; i++) {
                console.log(`   ${i + 1}. ${options[i].text} (value: ${options[i].value})`);
            }
            console.log(`   ... –∏ –µ—â–µ ${options.length - 5} –æ–ø—Ü–∏–π`);
        }
    });

    // 9. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã
    console.log('\n‚úèÔ∏è –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –í–í–û–î–ê:');
    const inputs = document.querySelectorAll('input');
    console.log(`–ü–æ–ª–µ–π –≤–≤–æ–¥–∞: ${inputs.length}`);

    const inputTypes = {};
    inputs.forEach(input => {
        const type = input.type || 'text';
        inputTypes[type] = (inputTypes[type] || 0) + 1;
    });

    Object.entries(inputTypes).forEach(([type, count]) => {
        console.log(`   ${type}: ${count}`);
    });

    // 10. –ò—â–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
    console.log('\nüîí –°–ö–†–´–¢–´–ï –ü–û–õ–Ø:');
    const hiddenInputs = document.querySelectorAll('input[type="hidden"]');
    console.log(`–°–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π: ${hiddenInputs.length}`);

    hiddenInputs.forEach((input, index) => {
        if (index < 10) {
            const info = getElementInfo(input);
            console.log(`${index + 1}. Hidden - ID: ${info.id}, Name: ${info.name}, Value: ${info.value}`);
        }
    });

    if (hiddenInputs.length > 10) {
        console.log(`... –∏ –µ—â–µ ${hiddenInputs.length - 10} —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π`);
    }

    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞');
    console.log('3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ JavaScript —Å–æ–±—ã—Ç–∏—è, –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeReportPage();

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
function testElementInteraction(selector, action = 'click') {
    try {
        const element = document.querySelector(selector);
        if (!element) {
            console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${selector}`);
            return false;
        }

        const info = getElementInfo(element);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: ${info.tagName} - ID: ${info.id}, Name: ${info.name}`);
        console.log(`   –í–∏–¥–∏–º—ã–π: ${info.isVisible}, –í–∫–ª—é—á–µ–Ω: ${info.isEnabled}, –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ: ${info.isReadOnly}`);

        if (action === 'click' && element.click) {
            console.log(`üñ±Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É...`);
            element.click();
            console.log(`‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        }

        return true;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏: ${error.message}`);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
function findFormElementsAdvanced() {
    console.log('\nüîç –ü–†–û–î–í–ò–ù–£–¢–´–ô –ü–û–ò–°–ö –≠–õ–ï–ú–ï–ù–¢–û–í –§–û–†–ú–´:');

    // –ò—â–µ–º –ø–æ ID
    const idPatterns = ['period', 'Period', 'date', 'Date', 'start', 'Start', 'end', 'End', 'reason', 'Reason'];
    idPatterns.forEach(pattern => {
        const elements = document.querySelectorAll(`[id*="${pattern}"]`);
        if (elements.length > 0) {
            console.log(`\n–≠–ª–µ–º–µ–Ω—Ç—ã —Å ID —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "${pattern}":`);
            elements.forEach((el, index) => {
                const info = getElementInfo(el);
                console.log(`  ${index + 1}. ${el.tagName} - ID: ${info.id}, Name: ${info.name}, Type: ${info.type}`);
            });
        }
    });

    // –ò—â–µ–º –ø–æ name
    const namePatterns = ['period', 'Period', 'date', 'Date', 'start', 'Start', 'end', 'End', 'reason', 'Reason'];
    namePatterns.forEach(pattern => {
        const elements = document.querySelectorAll(`[name*="${pattern}"]`);
        if (elements.length > 0) {
            console.log(`\n–≠–ª–µ–º–µ–Ω—Ç—ã —Å name —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "${pattern}":`);
            elements.forEach((el, index) => {
                const info = getElementInfo(el);
                console.log(`  ${index + 1}. ${el.tagName} - ID: ${info.id}, Name: ${info.name}, Type: ${info.type}`);
            });
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
setTimeout(findFormElementsAdvanced, 1000);

console.log('\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:');
console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12 -> Console)');
console.log('2. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
console.log('3. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞');
console.log('4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ testElementInteraction("—Å–µ–ª–µ–∫—Ç–æ—Ä") –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
console.log('5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞');
