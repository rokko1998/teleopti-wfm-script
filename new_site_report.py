#!/usr/bin/env python3
"""
new_site_report.py ‚Äî –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–π —Å –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–π—Ç http://t2ru-crmdb-03/Reports/report/...
2. –†–∞–±–æ—Ç–∞–µ—Ç –≤ no-headless —Ä–µ–∂–∏–º–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏
3. –ì–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∫–Ω–æ–ø–∫–∏, –ø–æ–ª—è, –∑–∞–≥—Ä—É–∑–∫–∞)
4. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É selenium_helpers

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python new_site_report.py [--headless] [--debug]

–ü–ê–†–ê–ú–ï–¢–†–´:
    --headless     –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é no-headless)
    --debug        –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

from __future__ import annotations

import sys
import argparse
import time
import json
from pathlib import Path
from loguru import logger

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from modules.selenium_helpers import get_driver, setup_proxy, apply_cdp_download_settings

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_DIR = Path(__file__).resolve().parent
NEW_SITE_URL = (
    "http://t2ru-crmdb-03/Reports/report/%D0%9E%D1%82%D1%87%D0%B5%D1%82%D1%8B%20%D0%9A%D0%A6/"
    "%D0%9E%D1%82%D1%87%D0%B5%D1%82%20%D0%BF%D0%BE%20%D0%BF%D1%80%D0%B8%D1%87%D0%B8%D0%BD%D0%B0%D0%BC%20"
    "%D0%BE%D0%B1%D1%80%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9%20(%D1%81%D0%BE%20%D1%81%D1%86%D0%B5%D0%BD%D0%B8%D1%8F%D0%BC%D0%B8%20"
    "%D1%80%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D0%B8"
)


def setup_logging(debug: bool = False):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    if debug:
        logger.remove()
        logger.add(
            sys.stderr,
            level="DEBUG",
            format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
                   "<level>{level: <8}</level> | "
                   "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - "
                   "<level>{message}</level>"
        )
    else:
        logger.remove()
        logger.add(
            sys.stderr,
            level="INFO",
            format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
                   "<level>{level: <8}</level> | "
                   "<level>{message}</level>"
        )


def open_new_site(driver, url: str):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∞–π—Ç –∏ –∂–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏."""
    logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç: {url}")

    try:
        driver.get(url)
        logger.info("‚úÖ –°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        time.sleep(3)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        logger.info(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {driver.title}")
        logger.info(f"üîó –¢–µ–∫—É—â–∏–π URL: {driver.current_url}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∞–π—Ç–∞: {e}")
        return False


def analyze_page_structure(driver):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

    try:
        # –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        buttons = driver.find_elements("tag name", "button")
        logger.info(f"üîò –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}")
        for i, btn in enumerate(buttons[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            try:
                text = btn.text.strip()
                btn_id = btn.get_attribute("id") or "–±–µ–∑ ID"
                btn_class = btn.get_attribute("class") or "–±–µ–∑ –∫–ª–∞—Å—Å–∞"
                logger.info(f"  {i+1}. –ö–Ω–æ–ø–∫–∞: '{text}' (ID: {btn_id}, –∫–ª–∞—Å—Å: {btn_class})")
            except:
                logger.info(f"  {i+1}. –ö–Ω–æ–ø–∫–∞: [–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å]")

        # –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        inputs = driver.find_elements("tag name", "input")
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞: {len(inputs)}")
        for i, inp in enumerate(inputs[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            try:
                inp_type = inp.get_attribute("type") or "–±–µ–∑ —Ç–∏–ø–∞"
                inp_id = inp.get_attribute("id") or "–±–µ–∑ ID"
                inp_name = inp.get_attribute("name") or "–±–µ–∑ –∏–º–µ–Ω–∏"
                inp_placeholder = inp.get_attribute("placeholder") or "–±–µ–∑ placeholder"
                logger.info(f"  {i+1}. –ü–æ–ª–µ: —Ç–∏–ø={inp_type}, ID={inp_id}, name={inp_name}, placeholder='{inp_placeholder}'")
            except:
                logger.info(f"  {i+1}. –ü–æ–ª–µ: [–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å]")

        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
        links = driver.find_elements("tag name", "a")
        logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
        for i, link in enumerate(links[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            try:
                text = link.text.strip()
                href = link.get_attribute("href") or "–±–µ–∑ href"
                logger.info(f"  {i+1}. –°—Å—ã–ª–∫–∞: '{text}' -> {href}")
            except:
                logger.info(f"  {i+1}. –°—Å—ã–ª–∫–∞: [–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å]")

        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = driver.find_elements("tag name", "table")
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

        # –ò—â–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
        forms = driver.find_elements("tag name", "form")
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: {len(forms)}")

        # –ò—â–µ–º –≤—Å–µ iframe
        iframes = driver.find_elements("tag name", "iframe")
        logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ iframe: {len(iframes)}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False


def get_page_html_structure(driver):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    logger.info("üìÑ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_source = driver.page_source

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        html_file = BASE_DIR / "page_structure_analysis.html"
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(page_source)

        logger.info(f"‚úÖ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {html_file}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        analyze_html_elements(driver)

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False


def analyze_html_elements(driver):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã...")

    try:
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã ReportViewer
        report_elements = driver.find_elements("xpath", "//*[contains(@id, 'ReportViewer') or contains(@class, 'ReportViewer')]")
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ReportViewer: {len(report_elements)}")

        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
        data_tables = driver.find_elements("xpath", "//table[contains(@class, 'data') or contains(@id, 'data') or contains(@class, 'table')]")
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–∞–Ω–Ω—ã—Ö: {len(data_tables)}")

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination = driver.find_elements("xpath", "//*[contains(@class, 'pagination') or contains(@id, 'pagination') or contains(text(), '–°—Ç—Ä–∞–Ω–∏—Ü–∞')]")
        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {len(pagination)}")

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_elements = driver.find_elements("xpath", "//*[contains(@class, 'export') or contains(@id, 'export') or contains(text(), '–≠–∫—Å–ø–æ—Ä—Ç') or contains(text(), 'Excel')]")
        logger.info(f"üíæ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞: {len(export_elements)}")

        # –ò—â–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
        hidden_data = driver.find_elements("xpath", "//input[@type='hidden' and contains(@value, 'data')]")
        logger.info(f"üîí –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {len(hidden_data)}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
        return False


def wait_for_user_instructions():
    """–ñ–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info("‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–µ–π—Å—Ç–≤–∏–π.")
    logger.info("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
    logger.info("  1. –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–∏–º–∞—Ç—å")
    logger.info("  2. –£–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—Ç—å")
    logger.info("  3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å")
    logger.info("  4. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞")

    input("üîÑ –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
    logger.info("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞")
    parser.add_argument("--headless", help="–ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ", action="store_true")
    parser.add_argument("--debug", help="–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", action="store_true")

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(args.debug)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é no-headless)
    headless = args.headless
    if headless:
        logger.info("üîí –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ")
    else:
        logger.info("üëÅÔ∏è –ó–∞–ø—É—Å–∫ –≤ no-headless —Ä–µ–∂–∏–º–µ (–±—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω)")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
    setup_proxy()

    # –°–æ–∑–¥–∞–µ–º WebDriver
    try:
        driver = get_driver(headless=headless)
        logger.info("‚úÖ WebDriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º CDP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        apply_cdp_download_settings(driver)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–∞–π—Ç
        if open_new_site(driver, NEW_SITE_URL):
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            analyze_page_structure(driver)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            get_page_html_structure(driver)

            # –ñ–¥–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            wait_for_user_instructions()

            # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º
            # 1. –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
            # 2. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
            # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞
            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

            logger.info("üéØ –ì–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º")

        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try:
            if 'driver' in locals():
                driver.quit()
                logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

    logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    return 0


if __name__ == "__main__":
    sys.exit(main())
